
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000761  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061a  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000276  00000000  00000000  00000f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "Includes/UART.h"
#include "Includes/Config_UART.h"
int main(void)
{
	UART_Init();
  6c:	0e 94 3d 00 	call	0x7a	; 0x7a <UART_Init>

	uint8 x=0;

	while (1)
	{
			x=UART_Recieve();
  70:	0e 94 4a 00 	call	0x94	; 0x94 <UART_Recieve>
			UART_Transmit(x);
  74:	0e 94 44 00 	call	0x88	; 0x88 <UART_Transmit>
  78:	fb cf       	rjmp	.-10     	; 0x70 <main+0x4>

0000007a <UART_Init>:
	{
		case ONE:
				/*Set Normal Speed Mode*/
				UBRR = ((F_CPU/16)/(UART_Struct.BaudRate)) - ONE;
				/*Set Baud Rate*/
				UBRRH = UBRR>>EIGHT ;
  7a:	10 bc       	out	0x20, r1	; 32
				UBRRL = UBRR;
  7c:	87 e6       	ldi	r24, 0x67	; 103
  7e:	89 b9       	out	0x09, r24	; 9
				/*Enable UART Transmitter and Receiver*/
				UCSRB |= (TRUE<<RXEN)|(TRUE<<TXEN);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	88 61       	ori	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
  86:	08 95       	ret

00000088 <UART_Transmit>:
/*Outputs:  N/A																					*/
/*Description:   Function that transmits data through UART                                         */
/**************************************************************************************************/

void UART_Transmit(uint8 data)
{
  88:	9b b1       	in	r25, 0x0b	; 11
	while(!Get_Bit(UCSRA,UDRE));
  8a:	90 72       	andi	r25, 0x20	; 32
  8c:	f1 f3       	breq	.-4      	; 0x8a <UART_Transmit+0x2>
  8e:	9b b9       	out	0x0b, r25	; 11
	UDR=data;
  90:	8c b9       	out	0x0c, r24	; 12
  92:	08 95       	ret

00000094 <UART_Recieve>:
/*Description:   Function that Receives character data through UART                                         */
/**************************************************************************************************/

uint8 UART_Recieve(void)
{
	while ( !(UCSRA & (1<<RXC)) )
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	88 23       	and	r24, r24
  98:	f4 f7       	brge	.-4      	; 0x96 <UART_Recieve+0x2>
	;
	/* Get and return received data from buffer */
	return UDR;

	
}
  9a:	8c b1       	in	r24, 0x0c	; 12
  9c:	08 95       	ret

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
