
Timer_1_PWM_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000165e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000016d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000016d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aab  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000725  00000000  00000000  00002293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4d  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00003808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  00003ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	9b 00       	.word	0x009b	; ????
      56:	b2 00       	.word	0x00b2	; ????
      58:	c9 00       	.word	0x00c9	; ????
      5a:	e0 00       	.word	0x00e0	; ????
      5c:	f7 00       	.word	0x00f7	; ????
      5e:	0e 01       	movw	r0, r28
      60:	25 01       	movw	r4, r10
      62:	3c 01       	movw	r6, r24
      64:	53 01       	movw	r10, r6
      66:	6a 01       	movw	r12, r20
      68:	81 01       	movw	r16, r2
      6a:	98 01       	movw	r18, r16
      6c:	af 01       	movw	r20, r30
      6e:	c6 01       	movw	r24, r12
      70:	dd 01       	movw	r26, r26
      72:	f4 01       	movw	r30, r8
      74:	0b 02       	muls	r16, r27
      76:	22 02       	muls	r18, r18
      78:	39 02       	muls	r19, r25
      7a:	50 02       	muls	r21, r16
      7c:	67 02       	muls	r22, r23
      7e:	7e 02       	muls	r23, r30
      80:	95 02       	muls	r25, r21
      82:	ac 02       	muls	r26, r28
      84:	c3 02       	muls	r28, r19
      86:	da 02       	muls	r29, r26
      88:	f1 02       	muls	r31, r17
      8a:	08 03       	fmul	r16, r16
      8c:	1f 03       	fmul	r17, r23
      8e:	36 03       	mulsu	r19, r22
      90:	4d 03       	fmul	r20, r21
      92:	64 03       	mulsu	r22, r20
      94:	9f 03       	fmulsu	r17, r23
      96:	b6 03       	fmuls	r19, r22
      98:	cd 03       	fmulsu	r20, r21
      9a:	e4 03       	fmuls	r22, r20
      9c:	fb 03       	fmulsu	r23, r19
      9e:	12 04       	cpc	r1, r2
      a0:	29 04       	cpc	r2, r9
      a2:	40 04       	cpc	r4, r0
      a4:	57 04       	cpc	r5, r7
      a6:	6e 04       	cpc	r6, r14
      a8:	85 04       	cpc	r8, r5
      aa:	9c 04       	cpc	r9, r12
      ac:	b3 04       	cpc	r11, r3
      ae:	ca 04       	cpc	r12, r10
      b0:	e1 04       	cpc	r14, r1
      b2:	f8 04       	cpc	r15, r8
      b4:	0f 05       	cpc	r16, r15
      b6:	26 05       	cpc	r18, r6
      b8:	3d 05       	cpc	r19, r13
      ba:	54 05       	cpc	r21, r4
      bc:	6b 05       	cpc	r22, r11
      be:	82 05       	cpc	r24, r2
      c0:	99 05       	cpc	r25, r9
      c2:	b0 05       	cpc	r27, r0
      c4:	c7 05       	cpc	r28, r7
      c6:	de 05       	cpc	r29, r14
      c8:	f5 05       	cpc	r31, r5
      ca:	0c 06       	cpc	r0, r28
      cc:	23 06       	cpc	r2, r19
      ce:	3a 06       	cpc	r3, r26
      d0:	51 06       	cpc	r5, r17
      d2:	68 06       	cpc	r6, r24

000000d4 <__ctors_end>:
      d4:	11 24       	eor	r1, r1
      d6:	1f be       	out	0x3f, r1	; 63
      d8:	cf e5       	ldi	r28, 0x5F	; 95
      da:	d8 e0       	ldi	r29, 0x08	; 8
      dc:	de bf       	out	0x3e, r29	; 62
      de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_clear_bss>:
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	a0 e6       	ldi	r26, 0x60	; 96
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a6 36       	cpi	r26, 0x66	; 102
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	0e 94 86 06 	call	0xd0c	; 0xd0c <main>
      f4:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <_exit>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <DIO_WritePin>:
	case PIN31: Result=Get_Bit(PIND,PIN7);break;
	
	default: break;
	}
	return Result;
}
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	00 d0       	rcall	.+0      	; 0x102 <DIO_WritePin+0x6>
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	6a 83       	std	Y+2, r22	; 0x02
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	09 2e       	mov	r0, r25
     112:	00 0c       	add	r0, r0
     114:	aa 0b       	sbc	r26, r26
     116:	bb 0b       	sbc	r27, r27
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	50 e0       	ldi	r21, 0x00	; 0
     11c:	2f e1       	ldi	r18, 0x1F	; 31
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	84 1b       	sub	r24, r20
     122:	95 0b       	sbc	r25, r21
     124:	28 17       	cp	r18, r24
     126:	39 07       	cpc	r19, r25
     128:	08 f4       	brcc	.+2      	; 0x12c <DIO_WritePin+0x30>
     12a:	e5 c2       	rjmp	.+1482   	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     12c:	86 5d       	subi	r24, 0xD6	; 214
     12e:	9f 4f       	sbci	r25, 0xFF	; 255
     130:	fc 01       	movw	r30, r24
     132:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__tablejump2__>
     136:	8a 81       	ldd	r24, Y+2	; 0x02
     138:	88 23       	and	r24, r24
     13a:	51 f4       	brne	.+20     	; 0x150 <DIO_WritePin+0x54>
     13c:	8b e3       	ldi	r24, 0x3B	; 59
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	2b e3       	ldi	r18, 0x3B	; 59
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	f9 01       	movw	r30, r18
     146:	20 81       	ld	r18, Z
     148:	2e 7f       	andi	r18, 0xFE	; 254
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
     14e:	d4 c2       	rjmp	.+1448   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     150:	8b e3       	ldi	r24, 0x3B	; 59
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	2b e3       	ldi	r18, 0x3B	; 59
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	20 81       	ld	r18, Z
     15c:	21 60       	ori	r18, 0x01	; 1
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
     162:	ca c2       	rjmp	.+1428   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	88 23       	and	r24, r24
     168:	51 f4       	brne	.+20     	; 0x17e <DIO_WritePin+0x82>
     16a:	8b e3       	ldi	r24, 0x3B	; 59
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	2b e3       	ldi	r18, 0x3B	; 59
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	f9 01       	movw	r30, r18
     174:	20 81       	ld	r18, Z
     176:	2d 7f       	andi	r18, 0xFD	; 253
     178:	fc 01       	movw	r30, r24
     17a:	20 83       	st	Z, r18
     17c:	bd c2       	rjmp	.+1402   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     17e:	8b e3       	ldi	r24, 0x3B	; 59
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	2b e3       	ldi	r18, 0x3B	; 59
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	f9 01       	movw	r30, r18
     188:	20 81       	ld	r18, Z
     18a:	22 60       	ori	r18, 0x02	; 2
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
     190:	b3 c2       	rjmp	.+1382   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     192:	8a 81       	ldd	r24, Y+2	; 0x02
     194:	88 23       	and	r24, r24
     196:	51 f4       	brne	.+20     	; 0x1ac <DIO_WritePin+0xb0>
     198:	8b e3       	ldi	r24, 0x3B	; 59
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2b e3       	ldi	r18, 0x3B	; 59
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	2b 7f       	andi	r18, 0xFB	; 251
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
     1aa:	a6 c2       	rjmp	.+1356   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     1ac:	8b e3       	ldi	r24, 0x3B	; 59
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	2b e3       	ldi	r18, 0x3B	; 59
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	24 60       	ori	r18, 0x04	; 4
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
     1be:	9c c2       	rjmp	.+1336   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	88 23       	and	r24, r24
     1c4:	51 f4       	brne	.+20     	; 0x1da <DIO_WritePin+0xde>
     1c6:	8b e3       	ldi	r24, 0x3B	; 59
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	2b e3       	ldi	r18, 0x3B	; 59
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	f9 01       	movw	r30, r18
     1d0:	20 81       	ld	r18, Z
     1d2:	27 7f       	andi	r18, 0xF7	; 247
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 83       	st	Z, r18
     1d8:	8f c2       	rjmp	.+1310   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     1da:	8b e3       	ldi	r24, 0x3B	; 59
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	2b e3       	ldi	r18, 0x3B	; 59
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	f9 01       	movw	r30, r18
     1e4:	20 81       	ld	r18, Z
     1e6:	28 60       	ori	r18, 0x08	; 8
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 83       	st	Z, r18
     1ec:	85 c2       	rjmp	.+1290   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     1ee:	8a 81       	ldd	r24, Y+2	; 0x02
     1f0:	88 23       	and	r24, r24
     1f2:	51 f4       	brne	.+20     	; 0x208 <DIO_WritePin+0x10c>
     1f4:	8b e3       	ldi	r24, 0x3B	; 59
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	2b e3       	ldi	r18, 0x3B	; 59
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	20 81       	ld	r18, Z
     200:	2f 7e       	andi	r18, 0xEF	; 239
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
     206:	78 c2       	rjmp	.+1264   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     208:	8b e3       	ldi	r24, 0x3B	; 59
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	2b e3       	ldi	r18, 0x3B	; 59
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	f9 01       	movw	r30, r18
     212:	20 81       	ld	r18, Z
     214:	20 61       	ori	r18, 0x10	; 16
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
     21a:	6e c2       	rjmp	.+1244   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	88 23       	and	r24, r24
     220:	51 f4       	brne	.+20     	; 0x236 <DIO_WritePin+0x13a>
     222:	8b e3       	ldi	r24, 0x3B	; 59
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	2b e3       	ldi	r18, 0x3B	; 59
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	2f 7d       	andi	r18, 0xDF	; 223
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
     234:	61 c2       	rjmp	.+1218   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     236:	8b e3       	ldi	r24, 0x3B	; 59
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	2b e3       	ldi	r18, 0x3B	; 59
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	f9 01       	movw	r30, r18
     240:	20 81       	ld	r18, Z
     242:	20 62       	ori	r18, 0x20	; 32
     244:	fc 01       	movw	r30, r24
     246:	20 83       	st	Z, r18
     248:	57 c2       	rjmp	.+1198   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	88 23       	and	r24, r24
     24e:	51 f4       	brne	.+20     	; 0x264 <DIO_WritePin+0x168>
     250:	8b e3       	ldi	r24, 0x3B	; 59
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	2b e3       	ldi	r18, 0x3B	; 59
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	2f 7b       	andi	r18, 0xBF	; 191
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18
     262:	4a c2       	rjmp	.+1172   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     264:	8b e3       	ldi	r24, 0x3B	; 59
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	2b e3       	ldi	r18, 0x3B	; 59
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	f9 01       	movw	r30, r18
     26e:	20 81       	ld	r18, Z
     270:	20 64       	ori	r18, 0x40	; 64
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
     276:	40 c2       	rjmp	.+1152   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     278:	8a 81       	ldd	r24, Y+2	; 0x02
     27a:	88 23       	and	r24, r24
     27c:	51 f4       	brne	.+20     	; 0x292 <DIO_WritePin+0x196>
     27e:	8b e3       	ldi	r24, 0x3B	; 59
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	2b e3       	ldi	r18, 0x3B	; 59
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	2f 77       	andi	r18, 0x7F	; 127
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
     290:	33 c2       	rjmp	.+1126   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     292:	8b e3       	ldi	r24, 0x3B	; 59
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	2b e3       	ldi	r18, 0x3B	; 59
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	f9 01       	movw	r30, r18
     29c:	20 81       	ld	r18, Z
     29e:	20 68       	ori	r18, 0x80	; 128
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 83       	st	Z, r18
     2a4:	29 c2       	rjmp	.+1106   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     2a6:	8a 81       	ldd	r24, Y+2	; 0x02
     2a8:	88 23       	and	r24, r24
     2aa:	51 f4       	brne	.+20     	; 0x2c0 <DIO_WritePin+0x1c4>
     2ac:	88 e3       	ldi	r24, 0x38	; 56
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	28 e3       	ldi	r18, 0x38	; 56
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	f9 01       	movw	r30, r18
     2b6:	20 81       	ld	r18, Z
     2b8:	2e 7f       	andi	r18, 0xFE	; 254
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18
     2be:	1c c2       	rjmp	.+1080   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     2c0:	88 e3       	ldi	r24, 0x38	; 56
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	28 e3       	ldi	r18, 0x38	; 56
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	21 60       	ori	r18, 0x01	; 1
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
     2d2:	12 c2       	rjmp	.+1060   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	88 23       	and	r24, r24
     2d8:	51 f4       	brne	.+20     	; 0x2ee <DIO_WritePin+0x1f2>
     2da:	88 e3       	ldi	r24, 0x38	; 56
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	28 e3       	ldi	r18, 0x38	; 56
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	f9 01       	movw	r30, r18
     2e4:	20 81       	ld	r18, Z
     2e6:	2d 7f       	andi	r18, 0xFD	; 253
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	05 c2       	rjmp	.+1034   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     2ee:	88 e3       	ldi	r24, 0x38	; 56
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	28 e3       	ldi	r18, 0x38	; 56
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	22 60       	ori	r18, 0x02	; 2
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
     300:	fb c1       	rjmp	.+1014   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     302:	8a 81       	ldd	r24, Y+2	; 0x02
     304:	88 23       	and	r24, r24
     306:	51 f4       	brne	.+20     	; 0x31c <DIO_WritePin+0x220>
     308:	88 e3       	ldi	r24, 0x38	; 56
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	28 e3       	ldi	r18, 0x38	; 56
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	f9 01       	movw	r30, r18
     312:	20 81       	ld	r18, Z
     314:	2b 7f       	andi	r18, 0xFB	; 251
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
     31a:	ee c1       	rjmp	.+988    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     31c:	88 e3       	ldi	r24, 0x38	; 56
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	28 e3       	ldi	r18, 0x38	; 56
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	24 60       	ori	r18, 0x04	; 4
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
     32e:	e4 c1       	rjmp	.+968    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     330:	8a 81       	ldd	r24, Y+2	; 0x02
     332:	88 23       	and	r24, r24
     334:	51 f4       	brne	.+20     	; 0x34a <DIO_WritePin+0x24e>
     336:	88 e3       	ldi	r24, 0x38	; 56
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	28 e3       	ldi	r18, 0x38	; 56
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	27 7f       	andi	r18, 0xF7	; 247
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
     348:	d7 c1       	rjmp	.+942    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     34a:	88 e3       	ldi	r24, 0x38	; 56
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	28 e3       	ldi	r18, 0x38	; 56
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	f9 01       	movw	r30, r18
     354:	20 81       	ld	r18, Z
     356:	28 60       	ori	r18, 0x08	; 8
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
     35c:	cd c1       	rjmp	.+922    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     35e:	8a 81       	ldd	r24, Y+2	; 0x02
     360:	88 23       	and	r24, r24
     362:	51 f4       	brne	.+20     	; 0x378 <DIO_WritePin+0x27c>
     364:	88 e3       	ldi	r24, 0x38	; 56
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	28 e3       	ldi	r18, 0x38	; 56
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	f9 01       	movw	r30, r18
     36e:	20 81       	ld	r18, Z
     370:	2f 7e       	andi	r18, 0xEF	; 239
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
     376:	c0 c1       	rjmp	.+896    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     378:	88 e3       	ldi	r24, 0x38	; 56
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	28 e3       	ldi	r18, 0x38	; 56
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	f9 01       	movw	r30, r18
     382:	20 81       	ld	r18, Z
     384:	20 61       	ori	r18, 0x10	; 16
     386:	fc 01       	movw	r30, r24
     388:	20 83       	st	Z, r18
     38a:	b6 c1       	rjmp	.+876    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     38c:	8a 81       	ldd	r24, Y+2	; 0x02
     38e:	88 23       	and	r24, r24
     390:	51 f4       	brne	.+20     	; 0x3a6 <DIO_WritePin+0x2aa>
     392:	88 e3       	ldi	r24, 0x38	; 56
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	28 e3       	ldi	r18, 0x38	; 56
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	f9 01       	movw	r30, r18
     39c:	20 81       	ld	r18, Z
     39e:	2f 7d       	andi	r18, 0xDF	; 223
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
     3a4:	a9 c1       	rjmp	.+850    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     3a6:	88 e3       	ldi	r24, 0x38	; 56
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	28 e3       	ldi	r18, 0x38	; 56
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	20 62       	ori	r18, 0x20	; 32
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
     3b8:	9f c1       	rjmp	.+830    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     3ba:	8a 81       	ldd	r24, Y+2	; 0x02
     3bc:	88 23       	and	r24, r24
     3be:	51 f4       	brne	.+20     	; 0x3d4 <DIO_WritePin+0x2d8>
     3c0:	88 e3       	ldi	r24, 0x38	; 56
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	28 e3       	ldi	r18, 0x38	; 56
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	f9 01       	movw	r30, r18
     3ca:	20 81       	ld	r18, Z
     3cc:	2f 7b       	andi	r18, 0xBF	; 191
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 83       	st	Z, r18
     3d2:	92 c1       	rjmp	.+804    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     3d4:	88 e3       	ldi	r24, 0x38	; 56
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	28 e3       	ldi	r18, 0x38	; 56
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	20 64       	ori	r18, 0x40	; 64
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
     3e6:	88 c1       	rjmp	.+784    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	88 23       	and	r24, r24
     3ec:	51 f4       	brne	.+20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3ee:	88 e3       	ldi	r24, 0x38	; 56
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	28 e3       	ldi	r18, 0x38	; 56
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	f9 01       	movw	r30, r18
     3f8:	20 81       	ld	r18, Z
     3fa:	2f 77       	andi	r18, 0x7F	; 127
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
     400:	7b c1       	rjmp	.+758    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     402:	88 e3       	ldi	r24, 0x38	; 56
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	28 e3       	ldi	r18, 0x38	; 56
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	f9 01       	movw	r30, r18
     40c:	20 81       	ld	r18, Z
     40e:	20 68       	ori	r18, 0x80	; 128
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
     414:	71 c1       	rjmp	.+738    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     416:	8a 81       	ldd	r24, Y+2	; 0x02
     418:	88 23       	and	r24, r24
     41a:	51 f4       	brne	.+20     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     41c:	85 e3       	ldi	r24, 0x35	; 53
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	25 e3       	ldi	r18, 0x35	; 53
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	20 81       	ld	r18, Z
     428:	2e 7f       	andi	r18, 0xFE	; 254
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
     42e:	64 c1       	rjmp	.+712    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     430:	85 e3       	ldi	r24, 0x35	; 53
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	25 e3       	ldi	r18, 0x35	; 53
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	f9 01       	movw	r30, r18
     43a:	20 81       	ld	r18, Z
     43c:	21 60       	ori	r18, 0x01	; 1
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
     442:	5a c1       	rjmp	.+692    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	88 23       	and	r24, r24
     448:	51 f4       	brne	.+20     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     44a:	85 e3       	ldi	r24, 0x35	; 53
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	25 e3       	ldi	r18, 0x35	; 53
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	2d 7f       	andi	r18, 0xFD	; 253
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
     45c:	4d c1       	rjmp	.+666    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     45e:	85 e3       	ldi	r24, 0x35	; 53
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	25 e3       	ldi	r18, 0x35	; 53
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	f9 01       	movw	r30, r18
     468:	20 81       	ld	r18, Z
     46a:	22 60       	ori	r18, 0x02	; 2
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
     470:	43 c1       	rjmp	.+646    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     472:	8a 81       	ldd	r24, Y+2	; 0x02
     474:	88 23       	and	r24, r24
     476:	51 f4       	brne	.+20     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     478:	85 e3       	ldi	r24, 0x35	; 53
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	25 e3       	ldi	r18, 0x35	; 53
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	f9 01       	movw	r30, r18
     482:	20 81       	ld	r18, Z
     484:	2b 7f       	andi	r18, 0xFB	; 251
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
     48a:	36 c1       	rjmp	.+620    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     48c:	85 e3       	ldi	r24, 0x35	; 53
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	25 e3       	ldi	r18, 0x35	; 53
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	f9 01       	movw	r30, r18
     496:	20 81       	ld	r18, Z
     498:	24 60       	ori	r18, 0x04	; 4
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
     49e:	2c c1       	rjmp	.+600    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	88 23       	and	r24, r24
     4a4:	51 f4       	brne	.+20     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4a6:	85 e3       	ldi	r24, 0x35	; 53
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	25 e3       	ldi	r18, 0x35	; 53
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	27 7f       	andi	r18, 0xF7	; 247
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
     4b8:	1f c1       	rjmp	.+574    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     4ba:	85 e3       	ldi	r24, 0x35	; 53
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	25 e3       	ldi	r18, 0x35	; 53
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	f9 01       	movw	r30, r18
     4c4:	20 81       	ld	r18, Z
     4c6:	28 60       	ori	r18, 0x08	; 8
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
     4cc:	15 c1       	rjmp	.+554    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	88 23       	and	r24, r24
     4d2:	51 f4       	brne	.+20     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4d4:	85 e3       	ldi	r24, 0x35	; 53
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	25 e3       	ldi	r18, 0x35	; 53
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	f9 01       	movw	r30, r18
     4de:	20 81       	ld	r18, Z
     4e0:	2f 7e       	andi	r18, 0xEF	; 239
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
     4e6:	08 c1       	rjmp	.+528    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     4e8:	85 e3       	ldi	r24, 0x35	; 53
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	25 e3       	ldi	r18, 0x35	; 53
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	f9 01       	movw	r30, r18
     4f2:	20 81       	ld	r18, Z
     4f4:	20 61       	ori	r18, 0x10	; 16
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 83       	st	Z, r18
     4fa:	fe c0       	rjmp	.+508    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     4fc:	8a 81       	ldd	r24, Y+2	; 0x02
     4fe:	88 23       	and	r24, r24
     500:	51 f4       	brne	.+20     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     502:	85 e3       	ldi	r24, 0x35	; 53
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	25 e3       	ldi	r18, 0x35	; 53
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	2f 7d       	andi	r18, 0xDF	; 223
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
     514:	f1 c0       	rjmp	.+482    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     516:	85 e3       	ldi	r24, 0x35	; 53
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	25 e3       	ldi	r18, 0x35	; 53
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	f9 01       	movw	r30, r18
     520:	20 81       	ld	r18, Z
     522:	20 62       	ori	r18, 0x20	; 32
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
     528:	e7 c0       	rjmp	.+462    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     52a:	8a 81       	ldd	r24, Y+2	; 0x02
     52c:	88 23       	and	r24, r24
     52e:	51 f4       	brne	.+20     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     530:	85 e3       	ldi	r24, 0x35	; 53
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	25 e3       	ldi	r18, 0x35	; 53
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	2f 7b       	andi	r18, 0xBF	; 191
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
     542:	da c0       	rjmp	.+436    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     544:	85 e3       	ldi	r24, 0x35	; 53
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	25 e3       	ldi	r18, 0x35	; 53
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	20 64       	ori	r18, 0x40	; 64
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
     556:	d0 c0       	rjmp	.+416    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	88 23       	and	r24, r24
     55c:	51 f4       	brne	.+20     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     55e:	85 e3       	ldi	r24, 0x35	; 53
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	25 e3       	ldi	r18, 0x35	; 53
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	2f 77       	andi	r18, 0x7F	; 127
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
     570:	c3 c0       	rjmp	.+390    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     572:	85 e3       	ldi	r24, 0x35	; 53
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	25 e3       	ldi	r18, 0x35	; 53
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	20 68       	ori	r18, 0x80	; 128
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
     584:	b9 c0       	rjmp	.+370    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	88 23       	and	r24, r24
     58a:	51 f4       	brne	.+20     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     58c:	82 e3       	ldi	r24, 0x32	; 50
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	22 e3       	ldi	r18, 0x32	; 50
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	f9 01       	movw	r30, r18
     596:	20 81       	ld	r18, Z
     598:	2e 7f       	andi	r18, 0xFE	; 254
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18
     59e:	ac c0       	rjmp	.+344    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     5a0:	82 e3       	ldi	r24, 0x32	; 50
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	22 e3       	ldi	r18, 0x32	; 50
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	f9 01       	movw	r30, r18
     5aa:	20 81       	ld	r18, Z
     5ac:	21 60       	ori	r18, 0x01	; 1
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
     5b2:	a2 c0       	rjmp	.+324    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	88 23       	and	r24, r24
     5b8:	51 f4       	brne	.+20     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5ba:	82 e3       	ldi	r24, 0x32	; 50
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	22 e3       	ldi	r18, 0x32	; 50
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	f9 01       	movw	r30, r18
     5c4:	20 81       	ld	r18, Z
     5c6:	2d 7f       	andi	r18, 0xFD	; 253
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
     5cc:	95 c0       	rjmp	.+298    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     5ce:	82 e3       	ldi	r24, 0x32	; 50
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	22 e3       	ldi	r18, 0x32	; 50
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	22 60       	ori	r18, 0x02	; 2
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
     5e0:	8b c0       	rjmp	.+278    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	88 23       	and	r24, r24
     5e6:	51 f4       	brne	.+20     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     5e8:	82 e3       	ldi	r24, 0x32	; 50
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	22 e3       	ldi	r18, 0x32	; 50
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	f9 01       	movw	r30, r18
     5f2:	20 81       	ld	r18, Z
     5f4:	2b 7f       	andi	r18, 0xFB	; 251
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18
     5fa:	7e c0       	rjmp	.+252    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     5fc:	82 e3       	ldi	r24, 0x32	; 50
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	22 e3       	ldi	r18, 0x32	; 50
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	24 60       	ori	r18, 0x04	; 4
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
     60e:	74 c0       	rjmp	.+232    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	88 23       	and	r24, r24
     614:	51 f4       	brne	.+20     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     616:	82 e3       	ldi	r24, 0x32	; 50
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	22 e3       	ldi	r18, 0x32	; 50
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	f9 01       	movw	r30, r18
     620:	20 81       	ld	r18, Z
     622:	27 7f       	andi	r18, 0xF7	; 247
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
     628:	67 c0       	rjmp	.+206    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     62a:	82 e3       	ldi	r24, 0x32	; 50
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	22 e3       	ldi	r18, 0x32	; 50
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	28 60       	ori	r18, 0x08	; 8
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
     63c:	5d c0       	rjmp	.+186    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     63e:	8a 81       	ldd	r24, Y+2	; 0x02
     640:	88 23       	and	r24, r24
     642:	51 f4       	brne	.+20     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     644:	82 e3       	ldi	r24, 0x32	; 50
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	22 e3       	ldi	r18, 0x32	; 50
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	2f 7e       	andi	r18, 0xEF	; 239
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18
     656:	50 c0       	rjmp	.+160    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     658:	82 e3       	ldi	r24, 0x32	; 50
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	22 e3       	ldi	r18, 0x32	; 50
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	f9 01       	movw	r30, r18
     662:	20 81       	ld	r18, Z
     664:	20 61       	ori	r18, 0x10	; 16
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
     66a:	46 c0       	rjmp	.+140    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     66c:	8a 81       	ldd	r24, Y+2	; 0x02
     66e:	88 23       	and	r24, r24
     670:	51 f4       	brne	.+20     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
     672:	82 e3       	ldi	r24, 0x32	; 50
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	22 e3       	ldi	r18, 0x32	; 50
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	f9 01       	movw	r30, r18
     67c:	20 81       	ld	r18, Z
     67e:	2f 7d       	andi	r18, 0xDF	; 223
     680:	fc 01       	movw	r30, r24
     682:	20 83       	st	Z, r18
     684:	39 c0       	rjmp	.+114    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     686:	82 e3       	ldi	r24, 0x32	; 50
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	22 e3       	ldi	r18, 0x32	; 50
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	20 62       	ori	r18, 0x20	; 32
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
     698:	2f c0       	rjmp	.+94     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	88 23       	and	r24, r24
     69e:	51 f4       	brne	.+20     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
     6a0:	82 e3       	ldi	r24, 0x32	; 50
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	22 e3       	ldi	r18, 0x32	; 50
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	2f 7b       	andi	r18, 0xBF	; 191
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
     6b2:	22 c0       	rjmp	.+68     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6b4:	82 e3       	ldi	r24, 0x32	; 50
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	22 e3       	ldi	r18, 0x32	; 50
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	20 64       	ori	r18, 0x40	; 64
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
     6c6:	18 c0       	rjmp	.+48     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	88 23       	and	r24, r24
     6cc:	51 f4       	brne	.+20     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
     6ce:	82 e3       	ldi	r24, 0x32	; 50
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	22 e3       	ldi	r18, 0x32	; 50
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	f9 01       	movw	r30, r18
     6d8:	20 81       	ld	r18, Z
     6da:	2f 77       	andi	r18, 0x7F	; 127
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6e2:	82 e3       	ldi	r24, 0x32	; 50
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	22 e3       	ldi	r18, 0x32	; 50
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	20 68       	ori	r18, 0x80	; 128
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f6:	00 00       	nop
     6f8:	00 00       	nop
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <DIO_SetPinDirection>:
/* Set the direction of the Pins */
/************************************************************************/


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	00 d0       	rcall	.+0      	; 0x70a <DIO_SetPinDirection+0x6>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	6a 83       	std	Y+2, r22	; 0x02
	switch(PinNum){
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	09 2e       	mov	r0, r25
     71a:	00 0c       	add	r0, r0
     71c:	aa 0b       	sbc	r26, r26
     71e:	bb 0b       	sbc	r27, r27
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	2f e1       	ldi	r18, 0x1F	; 31
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	84 1b       	sub	r24, r20
     72a:	95 0b       	sbc	r25, r21
     72c:	28 17       	cp	r18, r24
     72e:	39 07       	cpc	r19, r25
     730:	08 f4       	brcc	.+2      	; 0x734 <DIO_SetPinDirection+0x30>
     732:	e5 c2       	rjmp	.+1482   	; 0xcfe <__stack+0x49f>
     734:	86 5b       	subi	r24, 0xB6	; 182
     736:	9f 4f       	sbci	r25, 0xFF	; 255
     738:	fc 01       	movw	r30, r24
     73a:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__tablejump2__>
	case PIN0: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN0);}else{Set_Bit(DDRA,PIN0);};break;
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	51 f4       	brne	.+20     	; 0x758 <DIO_SetPinDirection+0x54>
     744:	8a e3       	ldi	r24, 0x3A	; 58
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	2a e3       	ldi	r18, 0x3A	; 58
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	2e 7f       	andi	r18, 0xFE	; 254
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
     756:	d4 c2       	rjmp	.+1448   	; 0xd00 <__stack+0x4a1>
     758:	8a e3       	ldi	r24, 0x3A	; 58
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	2a e3       	ldi	r18, 0x3A	; 58
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	f9 01       	movw	r30, r18
     762:	20 81       	ld	r18, Z
     764:	21 60       	ori	r18, 0x01	; 1
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
     76a:	ca c2       	rjmp	.+1428   	; 0xd00 <__stack+0x4a1>
	case PIN1: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN1);}else{Set_Bit(DDRA,PIN1);} ;break;
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	51 f4       	brne	.+20     	; 0x786 <DIO_SetPinDirection+0x82>
     772:	8a e3       	ldi	r24, 0x3A	; 58
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2a e3       	ldi	r18, 0x3A	; 58
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	2d 7f       	andi	r18, 0xFD	; 253
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
     784:	bd c2       	rjmp	.+1402   	; 0xd00 <__stack+0x4a1>
     786:	8a e3       	ldi	r24, 0x3A	; 58
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	2a e3       	ldi	r18, 0x3A	; 58
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	22 60       	ori	r18, 0x02	; 2
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
     798:	b3 c2       	rjmp	.+1382   	; 0xd00 <__stack+0x4a1>
	case PIN2: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN2);}else{Set_Bit(DDRA,PIN2);} ;break;
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	51 f4       	brne	.+20     	; 0x7b4 <DIO_SetPinDirection+0xb0>
     7a0:	8a e3       	ldi	r24, 0x3A	; 58
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	2a e3       	ldi	r18, 0x3A	; 58
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	2b 7f       	andi	r18, 0xFB	; 251
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
     7b2:	a6 c2       	rjmp	.+1356   	; 0xd00 <__stack+0x4a1>
     7b4:	8a e3       	ldi	r24, 0x3A	; 58
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	2a e3       	ldi	r18, 0x3A	; 58
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	24 60       	ori	r18, 0x04	; 4
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
     7c6:	9c c2       	rjmp	.+1336   	; 0xd00 <__stack+0x4a1>
	case PIN3: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN3);}else{Set_Bit(DDRA,PIN3);} ;break;
     7c8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	51 f4       	brne	.+20     	; 0x7e2 <DIO_SetPinDirection+0xde>
     7ce:	8a e3       	ldi	r24, 0x3A	; 58
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	2a e3       	ldi	r18, 0x3A	; 58
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	f9 01       	movw	r30, r18
     7d8:	20 81       	ld	r18, Z
     7da:	27 7f       	andi	r18, 0xF7	; 247
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
     7e0:	8f c2       	rjmp	.+1310   	; 0xd00 <__stack+0x4a1>
     7e2:	8a e3       	ldi	r24, 0x3A	; 58
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	2a e3       	ldi	r18, 0x3A	; 58
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	f9 01       	movw	r30, r18
     7ec:	20 81       	ld	r18, Z
     7ee:	28 60       	ori	r18, 0x08	; 8
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 83       	st	Z, r18
     7f4:	85 c2       	rjmp	.+1290   	; 0xd00 <__stack+0x4a1>
	case PIN4: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN4);}else{Set_Bit(DDRA,PIN4);} ;break;
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	51 f4       	brne	.+20     	; 0x810 <DIO_SetPinDirection+0x10c>
     7fc:	8a e3       	ldi	r24, 0x3A	; 58
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	2a e3       	ldi	r18, 0x3A	; 58
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	f9 01       	movw	r30, r18
     806:	20 81       	ld	r18, Z
     808:	2f 7e       	andi	r18, 0xEF	; 239
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
     80e:	78 c2       	rjmp	.+1264   	; 0xd00 <__stack+0x4a1>
     810:	8a e3       	ldi	r24, 0x3A	; 58
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	2a e3       	ldi	r18, 0x3A	; 58
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	f9 01       	movw	r30, r18
     81a:	20 81       	ld	r18, Z
     81c:	20 61       	ori	r18, 0x10	; 16
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	6e c2       	rjmp	.+1244   	; 0xd00 <__stack+0x4a1>
	case PIN5: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN5);}else{Set_Bit(DDRA,PIN5);} ;break;
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	51 f4       	brne	.+20     	; 0x83e <DIO_SetPinDirection+0x13a>
     82a:	8a e3       	ldi	r24, 0x3A	; 58
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	2a e3       	ldi	r18, 0x3A	; 58
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	f9 01       	movw	r30, r18
     834:	20 81       	ld	r18, Z
     836:	2f 7d       	andi	r18, 0xDF	; 223
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18
     83c:	61 c2       	rjmp	.+1218   	; 0xd00 <__stack+0x4a1>
     83e:	8a e3       	ldi	r24, 0x3A	; 58
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	2a e3       	ldi	r18, 0x3A	; 58
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	f9 01       	movw	r30, r18
     848:	20 81       	ld	r18, Z
     84a:	20 62       	ori	r18, 0x20	; 32
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
     850:	57 c2       	rjmp	.+1198   	; 0xd00 <__stack+0x4a1>
	case PIN6: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN6);}else{Set_Bit(DDRA,PIN6);} ;break;
     852:	8a 81       	ldd	r24, Y+2	; 0x02
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	51 f4       	brne	.+20     	; 0x86c <__stack+0xd>
     858:	8a e3       	ldi	r24, 0x3A	; 58
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	2a e3       	ldi	r18, 0x3A	; 58
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	f9 01       	movw	r30, r18
     862:	20 81       	ld	r18, Z
     864:	2f 7b       	andi	r18, 0xBF	; 191
     866:	fc 01       	movw	r30, r24
     868:	20 83       	st	Z, r18
     86a:	4a c2       	rjmp	.+1172   	; 0xd00 <__stack+0x4a1>
     86c:	8a e3       	ldi	r24, 0x3A	; 58
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2a e3       	ldi	r18, 0x3A	; 58
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	20 64       	ori	r18, 0x40	; 64
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
     87e:	40 c2       	rjmp	.+1152   	; 0xd00 <__stack+0x4a1>
	case PIN7: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN7);}else{Set_Bit(DDRA,PIN7);} ;break;
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	51 f4       	brne	.+20     	; 0x89a <__stack+0x3b>
     886:	8a e3       	ldi	r24, 0x3A	; 58
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	2a e3       	ldi	r18, 0x3A	; 58
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	2f 77       	andi	r18, 0x7F	; 127
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
     898:	33 c2       	rjmp	.+1126   	; 0xd00 <__stack+0x4a1>
     89a:	8a e3       	ldi	r24, 0x3A	; 58
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	2a e3       	ldi	r18, 0x3A	; 58
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	20 68       	ori	r18, 0x80	; 128
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
     8ac:	29 c2       	rjmp	.+1106   	; 0xd00 <__stack+0x4a1>
	case PIN8: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN0);}else{Set_Bit(DDRB,PIN0);} ;break;
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	51 f4       	brne	.+20     	; 0x8c8 <__stack+0x69>
     8b4:	87 e3       	ldi	r24, 0x37	; 55
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	27 e3       	ldi	r18, 0x37	; 55
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	f9 01       	movw	r30, r18
     8be:	20 81       	ld	r18, Z
     8c0:	2e 7f       	andi	r18, 0xFE	; 254
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
     8c6:	1c c2       	rjmp	.+1080   	; 0xd00 <__stack+0x4a1>
     8c8:	87 e3       	ldi	r24, 0x37	; 55
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	27 e3       	ldi	r18, 0x37	; 55
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	f9 01       	movw	r30, r18
     8d2:	20 81       	ld	r18, Z
     8d4:	21 60       	ori	r18, 0x01	; 1
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
     8da:	12 c2       	rjmp	.+1060   	; 0xd00 <__stack+0x4a1>
	case PIN9: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN1);}else{Set_Bit(DDRB,PIN1);} ;break;
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	51 f4       	brne	.+20     	; 0x8f6 <__stack+0x97>
     8e2:	87 e3       	ldi	r24, 0x37	; 55
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	27 e3       	ldi	r18, 0x37	; 55
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	f9 01       	movw	r30, r18
     8ec:	20 81       	ld	r18, Z
     8ee:	2d 7f       	andi	r18, 0xFD	; 253
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
     8f4:	05 c2       	rjmp	.+1034   	; 0xd00 <__stack+0x4a1>
     8f6:	87 e3       	ldi	r24, 0x37	; 55
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	27 e3       	ldi	r18, 0x37	; 55
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	f9 01       	movw	r30, r18
     900:	20 81       	ld	r18, Z
     902:	22 60       	ori	r18, 0x02	; 2
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
     908:	fb c1       	rjmp	.+1014   	; 0xd00 <__stack+0x4a1>
	case PIN10: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN2);}else{Set_Bit(DDRB,PIN2);} ;break;
     90a:	8a 81       	ldd	r24, Y+2	; 0x02
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	51 f4       	brne	.+20     	; 0x924 <__stack+0xc5>
     910:	87 e3       	ldi	r24, 0x37	; 55
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	27 e3       	ldi	r18, 0x37	; 55
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	f9 01       	movw	r30, r18
     91a:	20 81       	ld	r18, Z
     91c:	2b 7f       	andi	r18, 0xFB	; 251
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
     922:	ee c1       	rjmp	.+988    	; 0xd00 <__stack+0x4a1>
     924:	87 e3       	ldi	r24, 0x37	; 55
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	27 e3       	ldi	r18, 0x37	; 55
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	24 60       	ori	r18, 0x04	; 4
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
     936:	e4 c1       	rjmp	.+968    	; 0xd00 <__stack+0x4a1>
	case PIN11:  if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN3);}else{Set_Bit(DDRB,PIN3);} ;break;
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	51 f4       	brne	.+20     	; 0x952 <__stack+0xf3>
     93e:	87 e3       	ldi	r24, 0x37	; 55
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	27 e3       	ldi	r18, 0x37	; 55
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	f9 01       	movw	r30, r18
     948:	20 81       	ld	r18, Z
     94a:	27 7f       	andi	r18, 0xF7	; 247
     94c:	fc 01       	movw	r30, r24
     94e:	20 83       	st	Z, r18
     950:	d7 c1       	rjmp	.+942    	; 0xd00 <__stack+0x4a1>
     952:	87 e3       	ldi	r24, 0x37	; 55
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	27 e3       	ldi	r18, 0x37	; 55
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	28 60       	ori	r18, 0x08	; 8
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	cd c1       	rjmp	.+922    	; 0xd00 <__stack+0x4a1>
	case PIN12: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN4);}else{Set_Bit(DDRB,PIN4);} ;break;
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	51 f4       	brne	.+20     	; 0x980 <__stack+0x121>
     96c:	87 e3       	ldi	r24, 0x37	; 55
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	27 e3       	ldi	r18, 0x37	; 55
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	f9 01       	movw	r30, r18
     976:	20 81       	ld	r18, Z
     978:	2f 7e       	andi	r18, 0xEF	; 239
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
     97e:	c0 c1       	rjmp	.+896    	; 0xd00 <__stack+0x4a1>
     980:	87 e3       	ldi	r24, 0x37	; 55
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	27 e3       	ldi	r18, 0x37	; 55
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	f9 01       	movw	r30, r18
     98a:	20 81       	ld	r18, Z
     98c:	20 61       	ori	r18, 0x10	; 16
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
     992:	b6 c1       	rjmp	.+876    	; 0xd00 <__stack+0x4a1>
	case PIN13: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN5);}else{Set_Bit(DDRB,PIN5);} ;break;
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	51 f4       	brne	.+20     	; 0x9ae <__stack+0x14f>
     99a:	87 e3       	ldi	r24, 0x37	; 55
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	27 e3       	ldi	r18, 0x37	; 55
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	f9 01       	movw	r30, r18
     9a4:	20 81       	ld	r18, Z
     9a6:	2f 7d       	andi	r18, 0xDF	; 223
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
     9ac:	a9 c1       	rjmp	.+850    	; 0xd00 <__stack+0x4a1>
     9ae:	87 e3       	ldi	r24, 0x37	; 55
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	27 e3       	ldi	r18, 0x37	; 55
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	20 81       	ld	r18, Z
     9ba:	20 62       	ori	r18, 0x20	; 32
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
     9c0:	9f c1       	rjmp	.+830    	; 0xd00 <__stack+0x4a1>
	case PIN14: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN6);}else{Set_Bit(DDRB,PIN6);} ;break;
     9c2:	8a 81       	ldd	r24, Y+2	; 0x02
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	51 f4       	brne	.+20     	; 0x9dc <__stack+0x17d>
     9c8:	87 e3       	ldi	r24, 0x37	; 55
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	27 e3       	ldi	r18, 0x37	; 55
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	2f 7b       	andi	r18, 0xBF	; 191
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
     9da:	92 c1       	rjmp	.+804    	; 0xd00 <__stack+0x4a1>
     9dc:	87 e3       	ldi	r24, 0x37	; 55
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	27 e3       	ldi	r18, 0x37	; 55
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	f9 01       	movw	r30, r18
     9e6:	20 81       	ld	r18, Z
     9e8:	20 64       	ori	r18, 0x40	; 64
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
     9ee:	88 c1       	rjmp	.+784    	; 0xd00 <__stack+0x4a1>
	case PIN15: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN7);}else{Set_Bit(DDRB,PIN7);} ;break;
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	51 f4       	brne	.+20     	; 0xa0a <__stack+0x1ab>
     9f6:	87 e3       	ldi	r24, 0x37	; 55
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	27 e3       	ldi	r18, 0x37	; 55
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	f9 01       	movw	r30, r18
     a00:	20 81       	ld	r18, Z
     a02:	2f 77       	andi	r18, 0x7F	; 127
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
     a08:	7b c1       	rjmp	.+758    	; 0xd00 <__stack+0x4a1>
     a0a:	87 e3       	ldi	r24, 0x37	; 55
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	27 e3       	ldi	r18, 0x37	; 55
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	20 68       	ori	r18, 0x80	; 128
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
     a1c:	71 c1       	rjmp	.+738    	; 0xd00 <__stack+0x4a1>
	case PIN16: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN0);}else{Set_Bit(DDRC,PIN0);} ;break;
     a1e:	8a 81       	ldd	r24, Y+2	; 0x02
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	51 f4       	brne	.+20     	; 0xa38 <__stack+0x1d9>
     a24:	84 e3       	ldi	r24, 0x34	; 52
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	24 e3       	ldi	r18, 0x34	; 52
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	2e 7f       	andi	r18, 0xFE	; 254
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18
     a36:	64 c1       	rjmp	.+712    	; 0xd00 <__stack+0x4a1>
     a38:	84 e3       	ldi	r24, 0x34	; 52
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	24 e3       	ldi	r18, 0x34	; 52
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	f9 01       	movw	r30, r18
     a42:	20 81       	ld	r18, Z
     a44:	21 60       	ori	r18, 0x01	; 1
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
     a4a:	5a c1       	rjmp	.+692    	; 0xd00 <__stack+0x4a1>
	case PIN17: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN1);}else{Set_Bit(DDRC,PIN1);} ;break;
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	51 f4       	brne	.+20     	; 0xa66 <__stack+0x207>
     a52:	84 e3       	ldi	r24, 0x34	; 52
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	24 e3       	ldi	r18, 0x34	; 52
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	f9 01       	movw	r30, r18
     a5c:	20 81       	ld	r18, Z
     a5e:	2d 7f       	andi	r18, 0xFD	; 253
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
     a64:	4d c1       	rjmp	.+666    	; 0xd00 <__stack+0x4a1>
     a66:	84 e3       	ldi	r24, 0x34	; 52
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	24 e3       	ldi	r18, 0x34	; 52
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	22 60       	ori	r18, 0x02	; 2
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
     a78:	43 c1       	rjmp	.+646    	; 0xd00 <__stack+0x4a1>
	case PIN18: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN2);}else{Set_Bit(DDRC,PIN2);} ;break;
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	51 f4       	brne	.+20     	; 0xa94 <__stack+0x235>
     a80:	84 e3       	ldi	r24, 0x34	; 52
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	24 e3       	ldi	r18, 0x34	; 52
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	2b 7f       	andi	r18, 0xFB	; 251
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
     a92:	36 c1       	rjmp	.+620    	; 0xd00 <__stack+0x4a1>
     a94:	84 e3       	ldi	r24, 0x34	; 52
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	24 e3       	ldi	r18, 0x34	; 52
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	f9 01       	movw	r30, r18
     a9e:	20 81       	ld	r18, Z
     aa0:	24 60       	ori	r18, 0x04	; 4
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 83       	st	Z, r18
     aa6:	2c c1       	rjmp	.+600    	; 0xd00 <__stack+0x4a1>
	case PIN19: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN3);}else{Set_Bit(DDRC,PIN3);} ;break;
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	51 f4       	brne	.+20     	; 0xac2 <__stack+0x263>
     aae:	84 e3       	ldi	r24, 0x34	; 52
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	24 e3       	ldi	r18, 0x34	; 52
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	f9 01       	movw	r30, r18
     ab8:	20 81       	ld	r18, Z
     aba:	27 7f       	andi	r18, 0xF7	; 247
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
     ac0:	1f c1       	rjmp	.+574    	; 0xd00 <__stack+0x4a1>
     ac2:	84 e3       	ldi	r24, 0x34	; 52
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	24 e3       	ldi	r18, 0x34	; 52
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	f9 01       	movw	r30, r18
     acc:	20 81       	ld	r18, Z
     ace:	28 60       	ori	r18, 0x08	; 8
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 83       	st	Z, r18
     ad4:	15 c1       	rjmp	.+554    	; 0xd00 <__stack+0x4a1>
	case PIN20: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN4);}else{Set_Bit(DDRC,PIN4);} ;break;
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	51 f4       	brne	.+20     	; 0xaf0 <__stack+0x291>
     adc:	84 e3       	ldi	r24, 0x34	; 52
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	24 e3       	ldi	r18, 0x34	; 52
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	f9 01       	movw	r30, r18
     ae6:	20 81       	ld	r18, Z
     ae8:	2f 7e       	andi	r18, 0xEF	; 239
     aea:	fc 01       	movw	r30, r24
     aec:	20 83       	st	Z, r18
     aee:	08 c1       	rjmp	.+528    	; 0xd00 <__stack+0x4a1>
     af0:	84 e3       	ldi	r24, 0x34	; 52
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	24 e3       	ldi	r18, 0x34	; 52
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	f9 01       	movw	r30, r18
     afa:	20 81       	ld	r18, Z
     afc:	20 61       	ori	r18, 0x10	; 16
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18
     b02:	fe c0       	rjmp	.+508    	; 0xd00 <__stack+0x4a1>
	case PIN21: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN5);}else{Set_Bit(DDRC,PIN5);} ;break;
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	51 f4       	brne	.+20     	; 0xb1e <__stack+0x2bf>
     b0a:	84 e3       	ldi	r24, 0x34	; 52
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	24 e3       	ldi	r18, 0x34	; 52
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	f9 01       	movw	r30, r18
     b14:	20 81       	ld	r18, Z
     b16:	2f 7d       	andi	r18, 0xDF	; 223
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
     b1c:	f1 c0       	rjmp	.+482    	; 0xd00 <__stack+0x4a1>
     b1e:	84 e3       	ldi	r24, 0x34	; 52
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	24 e3       	ldi	r18, 0x34	; 52
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	20 62       	ori	r18, 0x20	; 32
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
     b30:	e7 c0       	rjmp	.+462    	; 0xd00 <__stack+0x4a1>
	case PIN22: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN6);}else{Set_Bit(DDRC,PIN6);} ;break;
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	51 f4       	brne	.+20     	; 0xb4c <__stack+0x2ed>
     b38:	84 e3       	ldi	r24, 0x34	; 52
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	24 e3       	ldi	r18, 0x34	; 52
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	f9 01       	movw	r30, r18
     b42:	20 81       	ld	r18, Z
     b44:	2f 7b       	andi	r18, 0xBF	; 191
     b46:	fc 01       	movw	r30, r24
     b48:	20 83       	st	Z, r18
     b4a:	da c0       	rjmp	.+436    	; 0xd00 <__stack+0x4a1>
     b4c:	84 e3       	ldi	r24, 0x34	; 52
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	24 e3       	ldi	r18, 0x34	; 52
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	f9 01       	movw	r30, r18
     b56:	20 81       	ld	r18, Z
     b58:	20 64       	ori	r18, 0x40	; 64
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18
     b5e:	d0 c0       	rjmp	.+416    	; 0xd00 <__stack+0x4a1>
	case PIN23: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN7);}else{Set_Bit(DDRC,PIN7);} ;break;
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	51 f4       	brne	.+20     	; 0xb7a <__stack+0x31b>
     b66:	84 e3       	ldi	r24, 0x34	; 52
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	24 e3       	ldi	r18, 0x34	; 52
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	2f 77       	andi	r18, 0x7F	; 127
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
     b78:	c3 c0       	rjmp	.+390    	; 0xd00 <__stack+0x4a1>
     b7a:	84 e3       	ldi	r24, 0x34	; 52
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	24 e3       	ldi	r18, 0x34	; 52
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	f9 01       	movw	r30, r18
     b84:	20 81       	ld	r18, Z
     b86:	20 68       	ori	r18, 0x80	; 128
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	b9 c0       	rjmp	.+370    	; 0xd00 <__stack+0x4a1>
	case PIN24: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN0);}else{Set_Bit(DDRD,PIN0);} ;break;
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	51 f4       	brne	.+20     	; 0xba8 <__stack+0x349>
     b94:	81 e3       	ldi	r24, 0x31	; 49
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	21 e3       	ldi	r18, 0x31	; 49
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	20 81       	ld	r18, Z
     ba0:	2e 7f       	andi	r18, 0xFE	; 254
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	ac c0       	rjmp	.+344    	; 0xd00 <__stack+0x4a1>
     ba8:	81 e3       	ldi	r24, 0x31	; 49
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	21 e3       	ldi	r18, 0x31	; 49
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	f9 01       	movw	r30, r18
     bb2:	20 81       	ld	r18, Z
     bb4:	21 60       	ori	r18, 0x01	; 1
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
     bba:	a2 c0       	rjmp	.+324    	; 0xd00 <__stack+0x4a1>
	case PIN25: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN1);}else{Set_Bit(DDRD,PIN1);} ;break;
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	51 f4       	brne	.+20     	; 0xbd6 <__stack+0x377>
     bc2:	81 e3       	ldi	r24, 0x31	; 49
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	21 e3       	ldi	r18, 0x31	; 49
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	f9 01       	movw	r30, r18
     bcc:	20 81       	ld	r18, Z
     bce:	2d 7f       	andi	r18, 0xFD	; 253
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 83       	st	Z, r18
     bd4:	95 c0       	rjmp	.+298    	; 0xd00 <__stack+0x4a1>
     bd6:	81 e3       	ldi	r24, 0x31	; 49
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	21 e3       	ldi	r18, 0x31	; 49
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	f9 01       	movw	r30, r18
     be0:	20 81       	ld	r18, Z
     be2:	22 60       	ori	r18, 0x02	; 2
     be4:	fc 01       	movw	r30, r24
     be6:	20 83       	st	Z, r18
     be8:	8b c0       	rjmp	.+278    	; 0xd00 <__stack+0x4a1>
	case PIN26: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN2);}else{Set_Bit(DDRD,PIN2);} ;break;
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	51 f4       	brne	.+20     	; 0xc04 <__stack+0x3a5>
     bf0:	81 e3       	ldi	r24, 0x31	; 49
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	21 e3       	ldi	r18, 0x31	; 49
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	f9 01       	movw	r30, r18
     bfa:	20 81       	ld	r18, Z
     bfc:	2b 7f       	andi	r18, 0xFB	; 251
     bfe:	fc 01       	movw	r30, r24
     c00:	20 83       	st	Z, r18
     c02:	7e c0       	rjmp	.+252    	; 0xd00 <__stack+0x4a1>
     c04:	81 e3       	ldi	r24, 0x31	; 49
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	21 e3       	ldi	r18, 0x31	; 49
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	20 81       	ld	r18, Z
     c10:	24 60       	ori	r18, 0x04	; 4
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18
     c16:	74 c0       	rjmp	.+232    	; 0xd00 <__stack+0x4a1>
	case PIN27: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN3);}else{Set_Bit(DDRD,PIN3);} ;break;
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	51 f4       	brne	.+20     	; 0xc32 <__stack+0x3d3>
     c1e:	81 e3       	ldi	r24, 0x31	; 49
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	21 e3       	ldi	r18, 0x31	; 49
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	f9 01       	movw	r30, r18
     c28:	20 81       	ld	r18, Z
     c2a:	27 7f       	andi	r18, 0xF7	; 247
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 83       	st	Z, r18
     c30:	67 c0       	rjmp	.+206    	; 0xd00 <__stack+0x4a1>
     c32:	81 e3       	ldi	r24, 0x31	; 49
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	21 e3       	ldi	r18, 0x31	; 49
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	28 60       	ori	r18, 0x08	; 8
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
     c44:	5d c0       	rjmp	.+186    	; 0xd00 <__stack+0x4a1>
	case PIN28: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN4);}else{Set_Bit(DDRD,PIN4);} ;break;
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	51 f4       	brne	.+20     	; 0xc60 <__stack+0x401>
     c4c:	81 e3       	ldi	r24, 0x31	; 49
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	21 e3       	ldi	r18, 0x31	; 49
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	2f 7e       	andi	r18, 0xEF	; 239
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 83       	st	Z, r18
     c5e:	50 c0       	rjmp	.+160    	; 0xd00 <__stack+0x4a1>
     c60:	81 e3       	ldi	r24, 0x31	; 49
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	21 e3       	ldi	r18, 0x31	; 49
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	f9 01       	movw	r30, r18
     c6a:	20 81       	ld	r18, Z
     c6c:	20 61       	ori	r18, 0x10	; 16
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
     c72:	46 c0       	rjmp	.+140    	; 0xd00 <__stack+0x4a1>
	case PIN29: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN5);}else{Set_Bit(DDRD,PIN5);} ;break;
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	51 f4       	brne	.+20     	; 0xc8e <__stack+0x42f>
     c7a:	81 e3       	ldi	r24, 0x31	; 49
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	21 e3       	ldi	r18, 0x31	; 49
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	f9 01       	movw	r30, r18
     c84:	20 81       	ld	r18, Z
     c86:	2f 7d       	andi	r18, 0xDF	; 223
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18
     c8c:	39 c0       	rjmp	.+114    	; 0xd00 <__stack+0x4a1>
     c8e:	81 e3       	ldi	r24, 0x31	; 49
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	21 e3       	ldi	r18, 0x31	; 49
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	f9 01       	movw	r30, r18
     c98:	20 81       	ld	r18, Z
     c9a:	20 62       	ori	r18, 0x20	; 32
     c9c:	fc 01       	movw	r30, r24
     c9e:	20 83       	st	Z, r18
     ca0:	2f c0       	rjmp	.+94     	; 0xd00 <__stack+0x4a1>
	case PIN30: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN6);}else{Set_Bit(DDRD,PIN6);} ;break;
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	51 f4       	brne	.+20     	; 0xcbc <__stack+0x45d>
     ca8:	81 e3       	ldi	r24, 0x31	; 49
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	21 e3       	ldi	r18, 0x31	; 49
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	2f 7b       	andi	r18, 0xBF	; 191
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
     cba:	22 c0       	rjmp	.+68     	; 0xd00 <__stack+0x4a1>
     cbc:	81 e3       	ldi	r24, 0x31	; 49
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	21 e3       	ldi	r18, 0x31	; 49
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	f9 01       	movw	r30, r18
     cc6:	20 81       	ld	r18, Z
     cc8:	20 64       	ori	r18, 0x40	; 64
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
     cce:	18 c0       	rjmp	.+48     	; 0xd00 <__stack+0x4a1>
	case PIN31: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN7);}else{Set_Bit(DDRD,PIN7);} ;break;
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	51 f4       	brne	.+20     	; 0xcea <__stack+0x48b>
     cd6:	81 e3       	ldi	r24, 0x31	; 49
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	21 e3       	ldi	r18, 0x31	; 49
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	f9 01       	movw	r30, r18
     ce0:	20 81       	ld	r18, Z
     ce2:	2f 77       	andi	r18, 0x7F	; 127
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 83       	st	Z, r18
     ce8:	0b c0       	rjmp	.+22     	; 0xd00 <__stack+0x4a1>
     cea:	81 e3       	ldi	r24, 0x31	; 49
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	21 e3       	ldi	r18, 0x31	; 49
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	f9 01       	movw	r30, r18
     cf4:	20 81       	ld	r18, Z
     cf6:	20 68       	ori	r18, 0x80	; 128
     cf8:	fc 01       	movw	r30, r24
     cfa:	20 83       	st	Z, r18
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <__stack+0x4a1>
    
	default: break; 
     cfe:	00 00       	nop
	
	}
}
     d00:	00 00       	nop
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <main>:
#include "Includes/Timer.h"
#include "Motor/Motor.h"
#include "util/delay.h"

int main(void)
{
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	e8 97       	sbiw	r28, 0x38	; 56
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
	
timer_init(0);
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	0e 94 32 09 	call	0x1264	; 0x1264 <timer_init>

DIO_SetPinDirection(PIN30,OUTPUT);
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	8e e1       	ldi	r24, 0x1E	; 30
     d2a:	0e 94 82 03 	call	0x704	; 0x704 <DIO_SetPinDirection>
DIO_SetPinDirection(PIN31,OUTPUT);
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	8f e1       	ldi	r24, 0x1F	; 31
     d32:	0e 94 82 03 	call	0x704	; 0x704 <DIO_SetPinDirection>
				
PORTD = 0xFF;
     d36:	82 e3       	ldi	r24, 0x32	; 50
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	2f ef       	ldi	r18, 0xFF	; 255
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
Motor_Init();
     d40:	0e 94 79 08 	call	0x10f2	; 0x10f2 <Motor_Init>

	

    while (1) 
    {
		Motor_Start(0,ClockWise);
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 a3 08 	call	0x1146	; 0x1146 <Motor_Start>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	aa ef       	ldi	r26, 0xFA	; 250
     d54:	b4 e4       	ldi	r27, 0x44	; 68
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	ab 83       	std	Y+3, r26	; 0x03
     d5c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	4a e7       	ldi	r20, 0x7A	; 122
     d64:	55 e4       	ldi	r21, 0x45	; 69
     d66:	69 81       	ldd	r22, Y+1	; 0x01
     d68:	7a 81       	ldd	r23, Y+2	; 0x02
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	0e 94 37 0a 	call	0x146e	; 0x146e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8f a7       	std	Y+47, r24	; 0x2f
     d78:	98 ab       	std	Y+48, r25	; 0x30
     d7a:	a9 ab       	std	Y+49, r26	; 0x31
     d7c:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	6f a5       	ldd	r22, Y+47	; 0x2f
     d88:	78 a9       	ldd	r23, Y+48	; 0x30
     d8a:	89 a9       	ldd	r24, Y+49	; 0x31
     d8c:	9a a9       	ldd	r25, Y+50	; 0x32
     d8e:	0e 94 b1 09 	call	0x1362	; 0x1362 <__cmpsf2>
     d92:	88 23       	and	r24, r24
     d94:	2c f4       	brge	.+10     	; 0xda0 <main+0x94>
		__ticks = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9c ab       	std	Y+52, r25	; 0x34
     d9c:	8b ab       	std	Y+51, r24	; 0x33
     d9e:	3f c0       	rjmp	.+126    	; 0xe1e <main+0x112>
	else if (__tmp > 65535)
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	3f ef       	ldi	r19, 0xFF	; 255
     da4:	4f e7       	ldi	r20, 0x7F	; 127
     da6:	57 e4       	ldi	r21, 0x47	; 71
     da8:	6f a5       	ldd	r22, Y+47	; 0x2f
     daa:	78 a9       	ldd	r23, Y+48	; 0x30
     dac:	89 a9       	ldd	r24, Y+49	; 0x31
     dae:	9a a9       	ldd	r25, Y+50	; 0x32
     db0:	0e 94 32 0a 	call	0x1464	; 0x1464 <__gesf2>
     db4:	18 16       	cp	r1, r24
     db6:	4c f5       	brge	.+82     	; 0xe0a <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e2       	ldi	r20, 0x20	; 32
     dbe:	51 e4       	ldi	r21, 0x41	; 65
     dc0:	69 81       	ldd	r22, Y+1	; 0x01
     dc2:	7a 81       	ldd	r23, Y+2	; 0x02
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	0e 94 37 0a 	call	0x146e	; 0x146e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9c ab       	std	Y+52, r25	; 0x34
     dde:	8b ab       	std	Y+51, r24	; 0x33
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <main+0xf4>
     de2:	80 e9       	ldi	r24, 0x90	; 144
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	9e ab       	std	Y+54, r25	; 0x36
     de8:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dea:	8d a9       	ldd	r24, Y+53	; 0x35
     dec:	9e a9       	ldd	r25, Y+54	; 0x36
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <main+0xe2>
     df2:	9e ab       	std	Y+54, r25	; 0x36
     df4:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8b a9       	ldd	r24, Y+51	; 0x33
     df8:	9c a9       	ldd	r25, Y+52	; 0x34
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9c ab       	std	Y+52, r25	; 0x34
     dfe:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8b a9       	ldd	r24, Y+51	; 0x33
     e02:	9c a9       	ldd	r25, Y+52	; 0x34
     e04:	89 2b       	or	r24, r25
     e06:	69 f7       	brne	.-38     	; 0xde2 <main+0xd6>
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	6f a5       	ldd	r22, Y+47	; 0x2f
     e0c:	78 a9       	ldd	r23, Y+48	; 0x30
     e0e:	89 a9       	ldd	r24, Y+49	; 0x31
     e10:	9a a9       	ldd	r25, Y+50	; 0x32
     e12:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9c ab       	std	Y+52, r25	; 0x34
     e1c:	8b ab       	std	Y+51, r24	; 0x33
     e1e:	8b a9       	ldd	r24, Y+51	; 0x33
     e20:	9c a9       	ldd	r25, Y+52	; 0x34
     e22:	98 af       	std	Y+56, r25	; 0x38
     e24:	8f ab       	std	Y+55, r24	; 0x37
     e26:	8f a9       	ldd	r24, Y+55	; 0x37
     e28:	98 ad       	ldd	r25, Y+56	; 0x38
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <main+0x11e>
     e2e:	98 af       	std	Y+56, r25	; 0x38
     e30:	8f ab       	std	Y+55, r24	; 0x37
		_delay_ms(2000);
		Motor_Stop();
     e32:	0e 94 22 09 	call	0x1244	; 0x1244 <Motor_Stop>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	aa ef       	ldi	r26, 0xFA	; 250
     e3c:	b4 e4       	ldi	r27, 0x44	; 68
     e3e:	8d 83       	std	Y+5, r24	; 0x05
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	af 83       	std	Y+7, r26	; 0x07
     e44:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4a e7       	ldi	r20, 0x7A	; 122
     e4c:	55 e4       	ldi	r21, 0x45	; 69
     e4e:	6d 81       	ldd	r22, Y+5	; 0x05
     e50:	7e 81       	ldd	r23, Y+6	; 0x06
     e52:	8f 81       	ldd	r24, Y+7	; 0x07
     e54:	98 85       	ldd	r25, Y+8	; 0x08
     e56:	0e 94 37 0a 	call	0x146e	; 0x146e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8d a3       	std	Y+37, r24	; 0x25
     e60:	9e a3       	std	Y+38, r25	; 0x26
     e62:	af a3       	std	Y+39, r26	; 0x27
     e64:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	6d a1       	ldd	r22, Y+37	; 0x25
     e70:	7e a1       	ldd	r23, Y+38	; 0x26
     e72:	8f a1       	ldd	r24, Y+39	; 0x27
     e74:	98 a5       	ldd	r25, Y+40	; 0x28
     e76:	0e 94 b1 09 	call	0x1362	; 0x1362 <__cmpsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	2c f4       	brge	.+10     	; 0xe88 <main+0x17c>
		__ticks = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9a a7       	std	Y+42, r25	; 0x2a
     e84:	89 a7       	std	Y+41, r24	; 0x29
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <main+0x1fa>
	else if (__tmp > 65535)
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	6d a1       	ldd	r22, Y+37	; 0x25
     e92:	7e a1       	ldd	r23, Y+38	; 0x26
     e94:	8f a1       	ldd	r24, Y+39	; 0x27
     e96:	98 a5       	ldd	r25, Y+40	; 0x28
     e98:	0e 94 32 0a 	call	0x1464	; 0x1464 <__gesf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	4c f5       	brge	.+82     	; 0xef2 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	6d 81       	ldd	r22, Y+5	; 0x05
     eaa:	7e 81       	ldd	r23, Y+6	; 0x06
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	0e 94 37 0a 	call	0x146e	; 0x146e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9a a7       	std	Y+42, r25	; 0x2a
     ec6:	89 a7       	std	Y+41, r24	; 0x29
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <main+0x1dc>
     eca:	80 e9       	ldi	r24, 0x90	; 144
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	9c a7       	std	Y+44, r25	; 0x2c
     ed0:	8b a7       	std	Y+43, r24	; 0x2b
     ed2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed4:	9c a5       	ldd	r25, Y+44	; 0x2c
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <main+0x1ca>
     eda:	9c a7       	std	Y+44, r25	; 0x2c
     edc:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	89 a5       	ldd	r24, Y+41	; 0x29
     ee0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	9a a7       	std	Y+42, r25	; 0x2a
     ee6:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	89 a5       	ldd	r24, Y+41	; 0x29
     eea:	9a a5       	ldd	r25, Y+42	; 0x2a
     eec:	89 2b       	or	r24, r25
     eee:	69 f7       	brne	.-38     	; 0xeca <main+0x1be>
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	6d a1       	ldd	r22, Y+37	; 0x25
     ef4:	7e a1       	ldd	r23, Y+38	; 0x26
     ef6:	8f a1       	ldd	r24, Y+39	; 0x27
     ef8:	98 a5       	ldd	r25, Y+40	; 0x28
     efa:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9a a7       	std	Y+42, r25	; 0x2a
     f04:	89 a7       	std	Y+41, r24	; 0x29
     f06:	89 a5       	ldd	r24, Y+41	; 0x29
     f08:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0a:	9e a7       	std	Y+46, r25	; 0x2e
     f0c:	8d a7       	std	Y+45, r24	; 0x2d
     f0e:	8d a5       	ldd	r24, Y+45	; 0x2d
     f10:	9e a5       	ldd	r25, Y+46	; 0x2e
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <main+0x206>
     f16:	9e a7       	std	Y+46, r25	; 0x2e
     f18:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_ms(2000);
		Motor_Start(90,AntiClockWise);
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	8a e5       	ldi	r24, 0x5A	; 90
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 a3 08 	call	0x1146	; 0x1146 <Motor_Start>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	aa ef       	ldi	r26, 0xFA	; 250
     f2a:	b4 e4       	ldi	r27, 0x44	; 68
     f2c:	89 87       	std	Y+9, r24	; 0x09
     f2e:	9a 87       	std	Y+10, r25	; 0x0a
     f30:	ab 87       	std	Y+11, r26	; 0x0b
     f32:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a e7       	ldi	r20, 0x7A	; 122
     f3a:	55 e4       	ldi	r21, 0x45	; 69
     f3c:	69 85       	ldd	r22, Y+9	; 0x09
     f3e:	7a 85       	ldd	r23, Y+10	; 0x0a
     f40:	8b 85       	ldd	r24, Y+11	; 0x0b
     f42:	9c 85       	ldd	r25, Y+12	; 0x0c
     f44:	0e 94 37 0a 	call	0x146e	; 0x146e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	8b 8f       	std	Y+27, r24	; 0x1b
     f4e:	9c 8f       	std	Y+28, r25	; 0x1c
     f50:	ad 8f       	std	Y+29, r26	; 0x1d
     f52:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     f5e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f64:	0e 94 b1 09 	call	0x1362	; 0x1362 <__cmpsf2>
     f68:	88 23       	and	r24, r24
     f6a:	2c f4       	brge	.+10     	; 0xf76 <main+0x26a>
		__ticks = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	98 a3       	std	Y+32, r25	; 0x20
     f72:	8f 8f       	std	Y+31, r24	; 0x1f
     f74:	3f c0       	rjmp	.+126    	; 0xff4 <main+0x2e8>
	else if (__tmp > 65535)
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     f80:	7c 8d       	ldd	r23, Y+28	; 0x1c
     f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f84:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f86:	0e 94 32 0a 	call	0x1464	; 0x1464 <__gesf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	4c f5       	brge	.+82     	; 0xfe0 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	69 85       	ldd	r22, Y+9	; 0x09
     f98:	7a 85       	ldd	r23, Y+10	; 0x0a
     f9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f9e:	0e 94 37 0a 	call	0x146e	; 0x146e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	98 a3       	std	Y+32, r25	; 0x20
     fb4:	8f 8f       	std	Y+31, r24	; 0x1f
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <main+0x2ca>
     fb8:	80 e9       	ldi	r24, 0x90	; 144
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	9a a3       	std	Y+34, r25	; 0x22
     fbe:	89 a3       	std	Y+33, r24	; 0x21
     fc0:	89 a1       	ldd	r24, Y+33	; 0x21
     fc2:	9a a1       	ldd	r25, Y+34	; 0x22
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <main+0x2b8>
     fc8:	9a a3       	std	Y+34, r25	; 0x22
     fca:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fce:	98 a1       	ldd	r25, Y+32	; 0x20
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	98 a3       	std	Y+32, r25	; 0x20
     fd4:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fd8:	98 a1       	ldd	r25, Y+32	; 0x20
     fda:	89 2b       	or	r24, r25
     fdc:	69 f7       	brne	.-38     	; 0xfb8 <main+0x2ac>
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <main+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     fe2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     fe4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fe6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fe8:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	98 a3       	std	Y+32, r25	; 0x20
     ff2:	8f 8f       	std	Y+31, r24	; 0x1f
     ff4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff6:	98 a1       	ldd	r25, Y+32	; 0x20
     ff8:	9c a3       	std	Y+36, r25	; 0x24
     ffa:	8b a3       	std	Y+35, r24	; 0x23
     ffc:	8b a1       	ldd	r24, Y+35	; 0x23
     ffe:	9c a1       	ldd	r25, Y+36	; 0x24
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <main+0x2f4>
    1004:	9c a3       	std	Y+36, r25	; 0x24
    1006:	8b a3       	std	Y+35, r24	; 0x23
		_delay_ms(2000);
		Motor_Stop();
    1008:	0e 94 22 09 	call	0x1244	; 0x1244 <Motor_Stop>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	aa ef       	ldi	r26, 0xFA	; 250
    1012:	b4 e4       	ldi	r27, 0x44	; 68
    1014:	8d 87       	std	Y+13, r24	; 0x0d
    1016:	9e 87       	std	Y+14, r25	; 0x0e
    1018:	af 87       	std	Y+15, r26	; 0x0f
    101a:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	4a e7       	ldi	r20, 0x7A	; 122
    1022:	55 e4       	ldi	r21, 0x45	; 69
    1024:	6d 85       	ldd	r22, Y+13	; 0x0d
    1026:	7e 85       	ldd	r23, Y+14	; 0x0e
    1028:	8f 85       	ldd	r24, Y+15	; 0x0f
    102a:	98 89       	ldd	r25, Y+16	; 0x10
    102c:	0e 94 37 0a 	call	0x146e	; 0x146e <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	89 8b       	std	Y+17, r24	; 0x11
    1036:	9a 8b       	std	Y+18, r25	; 0x12
    1038:	ab 8b       	std	Y+19, r26	; 0x13
    103a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	69 89       	ldd	r22, Y+17	; 0x11
    1046:	7a 89       	ldd	r23, Y+18	; 0x12
    1048:	8b 89       	ldd	r24, Y+19	; 0x13
    104a:	9c 89       	ldd	r25, Y+20	; 0x14
    104c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__cmpsf2>
    1050:	88 23       	and	r24, r24
    1052:	2c f4       	brge	.+10     	; 0x105e <main+0x352>
		__ticks = 1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9e 8b       	std	Y+22, r25	; 0x16
    105a:	8d 8b       	std	Y+21, r24	; 0x15
    105c:	3f c0       	rjmp	.+126    	; 0x10dc <main+0x3d0>
	else if (__tmp > 65535)
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	4f e7       	ldi	r20, 0x7F	; 127
    1064:	57 e4       	ldi	r21, 0x47	; 71
    1066:	69 89       	ldd	r22, Y+17	; 0x11
    1068:	7a 89       	ldd	r23, Y+18	; 0x12
    106a:	8b 89       	ldd	r24, Y+19	; 0x13
    106c:	9c 89       	ldd	r25, Y+20	; 0x14
    106e:	0e 94 32 0a 	call	0x1464	; 0x1464 <__gesf2>
    1072:	18 16       	cp	r1, r24
    1074:	4c f5       	brge	.+82     	; 0x10c8 <main+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1080:	7e 85       	ldd	r23, Y+14	; 0x0e
    1082:	8f 85       	ldd	r24, Y+15	; 0x0f
    1084:	98 89       	ldd	r25, Y+16	; 0x10
    1086:	0e 94 37 0a 	call	0x146e	; 0x146e <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9e 8b       	std	Y+22, r25	; 0x16
    109c:	8d 8b       	std	Y+21, r24	; 0x15
    109e:	0f c0       	rjmp	.+30     	; 0x10be <main+0x3b2>
    10a0:	80 e9       	ldi	r24, 0x90	; 144
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	98 8f       	std	Y+24, r25	; 0x18
    10a6:	8f 8b       	std	Y+23, r24	; 0x17
    10a8:	8f 89       	ldd	r24, Y+23	; 0x17
    10aa:	98 8d       	ldd	r25, Y+24	; 0x18
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <main+0x3a0>
    10b0:	98 8f       	std	Y+24, r25	; 0x18
    10b2:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b4:	8d 89       	ldd	r24, Y+21	; 0x15
    10b6:	9e 89       	ldd	r25, Y+22	; 0x16
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	9e 8b       	std	Y+22, r25	; 0x16
    10bc:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10be:	8d 89       	ldd	r24, Y+21	; 0x15
    10c0:	9e 89       	ldd	r25, Y+22	; 0x16
    10c2:	89 2b       	or	r24, r25
    10c4:	69 f7       	brne	.-38     	; 0x10a0 <main+0x394>
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <main+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c8:	69 89       	ldd	r22, Y+17	; 0x11
    10ca:	7a 89       	ldd	r23, Y+18	; 0x12
    10cc:	8b 89       	ldd	r24, Y+19	; 0x13
    10ce:	9c 89       	ldd	r25, Y+20	; 0x14
    10d0:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9e 8b       	std	Y+22, r25	; 0x16
    10da:	8d 8b       	std	Y+21, r24	; 0x15
    10dc:	8d 89       	ldd	r24, Y+21	; 0x15
    10de:	9e 89       	ldd	r25, Y+22	; 0x16
    10e0:	9a 8f       	std	Y+26, r25	; 0x1a
    10e2:	89 8f       	std	Y+25, r24	; 0x19
    10e4:	89 8d       	ldd	r24, Y+25	; 0x19
    10e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <main+0x3dc>
    10ec:	9a 8f       	std	Y+26, r25	; 0x1a
    10ee:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(2000);		
		
    }
    10f0:	29 ce       	rjmp	.-942    	; 0xd44 <main+0x38>

000010f2 <Motor_Init>:
volatile uint16 Speed_Value;

	
	void Motor_Init (void)
	
	{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
			/* Set Enable pins Output */
			DIO_SetPinDirection(OC1A,OUTPUT);
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	8d e1       	ldi	r24, 0x1D	; 29
    10fe:	0e 94 82 03 	call	0x704	; 0x704 <DIO_SetPinDirection>
			DIO_SetPinDirection(OC1B,OUTPUT);
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	8c e1       	ldi	r24, 0x1C	; 28
    1106:	0e 94 82 03 	call	0x704	; 0x704 <DIO_SetPinDirection>
			
			ICR1H_H=((TOP_VALUE>>EIGHTBITS) & MASK);
    110a:	87 e4       	ldi	r24, 0x47	; 71
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	2a ed       	ldi	r18, 0xDA	; 218
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
			ICR1L_H=((TOP_VALUE>>ZEROBITS) & MASK);
    1114:	86 e4       	ldi	r24, 0x46	; 70
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	20 ec       	ldi	r18, 0xC0	; 192
    111a:	fc 01       	movw	r30, r24
    111c:	20 83       	st	Z, r18
			OCR1AH_H=COMPARE_Value_H;
    111e:	8b e4       	ldi	r24, 0x4B	; 75
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
    1126:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
    112a:	fc 01       	movw	r30, r24
    112c:	20 83       	st	Z, r18
			OCR1AL_H=COMPARE_Value_L;
    112e:	8a e4       	ldi	r24, 0x4A	; 74
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <COMPARE_Value_L>
    1136:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <COMPARE_Value_L+0x1>
    113a:	fc 01       	movw	r30, r24
    113c:	20 83       	st	Z, r18

	}
    113e:	00 00       	nop
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <Motor_Start>:
	

	void Motor_Start(uint16 Speed, uint8 MotorDir)
	{
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	00 d0       	rcall	.+0      	; 0x114c <Motor_Start+0x6>
    114c:	1f 92       	push	r1
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6b 83       	std	Y+3, r22	; 0x03
	if (MotorDir==ClockWise)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	a9 f5       	brne	.+106    	; 0x11c8 <Motor_Start+0x82>
	{
		
		Speed_Value=((Speed*TOP_VALUE)/Hundered);
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	9c 01       	movw	r18, r24
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	80 ec       	ldi	r24, 0xC0	; 192
    116a:	9a ed       	ldi	r25, 0xDA	; 218
    116c:	dc 01       	movw	r26, r24
    116e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__muluhisi3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	24 e6       	ldi	r18, 0x64	; 100
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__divmodsi4>
    1186:	da 01       	movw	r26, r20
    1188:	c9 01       	movw	r24, r18
    118a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Speed_Value+0x1>
    118e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Speed_Value>
		OCR1AH_H=((Speed_Value>>EIGHTBITS) & MASK);
    1192:	8b e4       	ldi	r24, 0x4B	; 75
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Speed_Value>
    119a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Speed_Value+0x1>
    119e:	23 2f       	mov	r18, r19
    11a0:	33 27       	eor	r19, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18
		OCR1AL_H=((Speed_Value>>ZEROBITS) & MASK);
    11a6:	8a e4       	ldi	r24, 0x4A	; 74
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Speed_Value>
    11ae:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Speed_Value+0x1>
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 83       	st	Z, r18
		DIO_WritePin(PIN30,HIGH);
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	8e e1       	ldi	r24, 0x1E	; 30
    11ba:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_WritePin>
		DIO_WritePin(PIN31,LOW);				
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	8f e1       	ldi	r24, 0x1F	; 31
    11c2:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_WritePin>
		OCR1AL_H=((Speed_Value>>ZEROBITS) & MASK);
		DIO_WritePin(PIN30,LOW);
		DIO_WritePin(PIN31,HIGH);				
	}
	
	}
    11c6:	37 c0       	rjmp	.+110    	; 0x1236 <Motor_Start+0xf0>
		OCR1AL_H=((Speed_Value>>ZEROBITS) & MASK);
		DIO_WritePin(PIN30,HIGH);
		DIO_WritePin(PIN31,LOW);				

	}
	else if (MotorDir==AntiClockWise)
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	88 23       	and	r24, r24
    11cc:	a1 f5       	brne	.+104    	; 0x1236 <Motor_Start+0xf0>
	{
		Speed_Value=((Speed*TOP_VALUE)/Hundered);
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	9c 01       	movw	r18, r24
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	80 ec       	ldi	r24, 0xC0	; 192
    11da:	9a ed       	ldi	r25, 0xDA	; 218
    11dc:	dc 01       	movw	r26, r24
    11de:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__muluhisi3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	24 e6       	ldi	r18, 0x64	; 100
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__divmodsi4>
    11f6:	da 01       	movw	r26, r20
    11f8:	c9 01       	movw	r24, r18
    11fa:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Speed_Value+0x1>
    11fe:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Speed_Value>
		OCR1AH_H=((Speed_Value>>EIGHTBITS) & MASK);
    1202:	8b e4       	ldi	r24, 0x4B	; 75
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Speed_Value>
    120a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Speed_Value+0x1>
    120e:	23 2f       	mov	r18, r19
    1210:	33 27       	eor	r19, r19
    1212:	fc 01       	movw	r30, r24
    1214:	20 83       	st	Z, r18
		OCR1AL_H=((Speed_Value>>ZEROBITS) & MASK);
    1216:	8a e4       	ldi	r24, 0x4A	; 74
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Speed_Value>
    121e:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Speed_Value+0x1>
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
		DIO_WritePin(PIN30,LOW);
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	8e e1       	ldi	r24, 0x1E	; 30
    122a:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_WritePin>
		DIO_WritePin(PIN31,HIGH);				
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	8f e1       	ldi	r24, 0x1F	; 31
    1232:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_WritePin>
	}
	
	}
    1236:	00 00       	nop
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <Motor_Stop>:
	
	void Motor_Stop(void)
	{
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62

				DIO_WritePin(PIN30,LOW);
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	8e e1       	ldi	r24, 0x1E	; 30
    1250:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_WritePin>
				DIO_WritePin(PIN31,LOW);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	8f e1       	ldi	r24, 0x1F	; 31
    1258:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_WritePin>
				

	}
    125c:	00 00       	nop
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <timer_init>:
/* Initialize Timer Zero */                                                                    
/************************************************************************/


void timer_init(uint8 Mode)
{	
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	1f 92       	push	r1
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
if(FAST_PWM==0)
{
	/* Mode 14: Fast PWM to Read top from ICR1 */
	Clear_Bit(TCCR1A_H,WGM10);
    1270:	8f e4       	ldi	r24, 0x4F	; 79
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	2f e4       	ldi	r18, 0x4F	; 79
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	f9 01       	movw	r30, r18
    127a:	20 81       	ld	r18, Z
    127c:	2e 7f       	andi	r18, 0xFE	; 254
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18
	Set_Bit(TCCR1A_H,WGM11);
    1282:	8f e4       	ldi	r24, 0x4F	; 79
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	2f e4       	ldi	r18, 0x4F	; 79
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	f9 01       	movw	r30, r18
    128c:	20 81       	ld	r18, Z
    128e:	22 60       	ori	r18, 0x02	; 2
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18
	Set_Bit(TCCR1B_H,WGM12);
    1294:	8e e4       	ldi	r24, 0x4E	; 78
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	2e e4       	ldi	r18, 0x4E	; 78
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	f9 01       	movw	r30, r18
    129e:	20 81       	ld	r18, Z
    12a0:	28 60       	ori	r18, 0x08	; 8
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 83       	st	Z, r18
	Set_Bit(TCCR1B_H,WGM13);
    12a6:	8e e4       	ldi	r24, 0x4E	; 78
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	2e e4       	ldi	r18, 0x4E	; 78
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	f9 01       	movw	r30, r18
    12b0:	20 81       	ld	r18, Z
    12b2:	20 61       	ori	r18, 0x10	; 16
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18

	/* Output Compare Mode / Fast PWM / Inverted */
	Set_Bit(TCCR1A_H,COM1A1);
    12b8:	8f e4       	ldi	r24, 0x4F	; 79
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	2f e4       	ldi	r18, 0x4F	; 79
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	f9 01       	movw	r30, r18
    12c2:	20 81       	ld	r18, Z
    12c4:	20 68       	ori	r18, 0x80	; 128
    12c6:	fc 01       	movw	r30, r24
    12c8:	20 83       	st	Z, r18
	Set_Bit(TCCR1A_H,COM1A0);
    12ca:	8f e4       	ldi	r24, 0x4F	; 79
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	2f e4       	ldi	r18, 0x4F	; 79
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	20 64       	ori	r18, 0x40	; 64
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
	Set_Bit(TCCR1A_H,COM1B1);
    12dc:	8f e4       	ldi	r24, 0x4F	; 79
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	2f e4       	ldi	r18, 0x4F	; 79
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	20 62       	ori	r18, 0x20	; 32
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
	Set_Bit(TCCR1A_H,COM1B0);
    12ee:	8f e4       	ldi	r24, 0x4F	; 79
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	2f e4       	ldi	r18, 0x4F	; 79
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	f9 01       	movw	r30, r18
    12f8:	20 81       	ld	r18, Z
    12fa:	20 61       	ori	r18, 0x10	; 16
    12fc:	fc 01       	movw	r30, r24
    12fe:	20 83       	st	Z, r18
	
	
    /* Reset TCNT0 & SET The Compare Reg to a value */	
	TCNT1H_H=RESET;
    1300:	8d e4       	ldi	r24, 0x4D	; 77
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	fc 01       	movw	r30, r24
    1306:	10 82       	st	Z, r1
	TCNT1L_H=RESET;
    1308:	8c e4       	ldi	r24, 0x4C	; 76
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	fc 01       	movw	r30, r24
    130e:	10 82       	st	Z, r1

	/* Set Pre-Scaler to No Prescaler*/	
	Set_Bit(TCCR1B_H,CS10);
    1310:	8e e4       	ldi	r24, 0x4E	; 78
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	2e e4       	ldi	r18, 0x4E	; 78
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	f9 01       	movw	r30, r18
    131a:	20 81       	ld	r18, Z
    131c:	21 60       	ori	r18, 0x01	; 1
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
	Clear_Bit(TCCR1B_H,CS11);
    1322:	8e e4       	ldi	r24, 0x4E	; 78
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	2e e4       	ldi	r18, 0x4E	; 78
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	f9 01       	movw	r30, r18
    132c:	20 81       	ld	r18, Z
    132e:	2d 7f       	andi	r18, 0xFD	; 253
    1330:	fc 01       	movw	r30, r24
    1332:	20 83       	st	Z, r18
	Clear_Bit(TCCR1B_H,CS12);
    1334:	8e e4       	ldi	r24, 0x4E	; 78
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	2e e4       	ldi	r18, 0x4E	; 78
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	f9 01       	movw	r30, r18
    133e:	20 81       	ld	r18, Z
    1340:	2b 7f       	andi	r18, 0xFB	; 251
    1342:	fc 01       	movw	r30, r24
    1344:	20 83       	st	Z, r18
	Clear_Bit(SREG_H,GIE);
    1346:	8f e5       	ldi	r24, 0x5F	; 95
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	2f e5       	ldi	r18, 0x5F	; 95
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	f9 01       	movw	r30, r18
    1350:	20 81       	ld	r18, Z
    1352:	2f 77       	andi	r18, 0x7F	; 127
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18
		Set_Bit(TCCR1B_H,CS10);
		Clear_Bit(TCCR1B_H,CS11);
		Clear_Bit(TCCR1B_H,CS12);
		Clear_Bit(SREG_H,GIE);
}
}
    1358:	00 00       	nop
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <__cmpsf2>:
    1362:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fp_cmp>
    1366:	08 f4       	brcc	.+2      	; 0x136a <__cmpsf2+0x8>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	08 95       	ret

0000136c <__fixunssfsi>:
    136c:	0e 94 11 0a 	call	0x1422	; 0x1422 <__fp_splitA>
    1370:	88 f0       	brcs	.+34     	; 0x1394 <__fixunssfsi+0x28>
    1372:	9f 57       	subi	r25, 0x7F	; 127
    1374:	98 f0       	brcs	.+38     	; 0x139c <__fixunssfsi+0x30>
    1376:	b9 2f       	mov	r27, r25
    1378:	99 27       	eor	r25, r25
    137a:	b7 51       	subi	r27, 0x17	; 23
    137c:	b0 f0       	brcs	.+44     	; 0x13aa <__fixunssfsi+0x3e>
    137e:	e1 f0       	breq	.+56     	; 0x13b8 <__fixunssfsi+0x4c>
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	1a f0       	brmi	.+6      	; 0x1390 <__fixunssfsi+0x24>
    138a:	ba 95       	dec	r27
    138c:	c9 f7       	brne	.-14     	; 0x1380 <__fixunssfsi+0x14>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <__fixunssfsi+0x4c>
    1390:	b1 30       	cpi	r27, 0x01	; 1
    1392:	91 f0       	breq	.+36     	; 0x13b8 <__fixunssfsi+0x4c>
    1394:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_zero>
    1398:	b1 e0       	ldi	r27, 0x01	; 1
    139a:	08 95       	ret
    139c:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__fp_zero>
    13a0:	67 2f       	mov	r22, r23
    13a2:	78 2f       	mov	r23, r24
    13a4:	88 27       	eor	r24, r24
    13a6:	b8 5f       	subi	r27, 0xF8	; 248
    13a8:	39 f0       	breq	.+14     	; 0x13b8 <__fixunssfsi+0x4c>
    13aa:	b9 3f       	cpi	r27, 0xF9	; 249
    13ac:	cc f3       	brlt	.-14     	; 0x13a0 <__fixunssfsi+0x34>
    13ae:	86 95       	lsr	r24
    13b0:	77 95       	ror	r23
    13b2:	67 95       	ror	r22
    13b4:	b3 95       	inc	r27
    13b6:	d9 f7       	brne	.-10     	; 0x13ae <__fixunssfsi+0x42>
    13b8:	3e f4       	brtc	.+14     	; 0x13c8 <__fixunssfsi+0x5c>
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	70 95       	com	r23
    13c0:	61 95       	neg	r22
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	08 95       	ret

000013ca <__fp_cmp>:
    13ca:	99 0f       	add	r25, r25
    13cc:	00 08       	sbc	r0, r0
    13ce:	55 0f       	add	r21, r21
    13d0:	aa 0b       	sbc	r26, r26
    13d2:	e0 e8       	ldi	r30, 0x80	; 128
    13d4:	fe ef       	ldi	r31, 0xFE	; 254
    13d6:	16 16       	cp	r1, r22
    13d8:	17 06       	cpc	r1, r23
    13da:	e8 07       	cpc	r30, r24
    13dc:	f9 07       	cpc	r31, r25
    13de:	c0 f0       	brcs	.+48     	; 0x1410 <__fp_cmp+0x46>
    13e0:	12 16       	cp	r1, r18
    13e2:	13 06       	cpc	r1, r19
    13e4:	e4 07       	cpc	r30, r20
    13e6:	f5 07       	cpc	r31, r21
    13e8:	98 f0       	brcs	.+38     	; 0x1410 <__fp_cmp+0x46>
    13ea:	62 1b       	sub	r22, r18
    13ec:	73 0b       	sbc	r23, r19
    13ee:	84 0b       	sbc	r24, r20
    13f0:	95 0b       	sbc	r25, r21
    13f2:	39 f4       	brne	.+14     	; 0x1402 <__fp_cmp+0x38>
    13f4:	0a 26       	eor	r0, r26
    13f6:	61 f0       	breq	.+24     	; 0x1410 <__fp_cmp+0x46>
    13f8:	23 2b       	or	r18, r19
    13fa:	24 2b       	or	r18, r20
    13fc:	25 2b       	or	r18, r21
    13fe:	21 f4       	brne	.+8      	; 0x1408 <__fp_cmp+0x3e>
    1400:	08 95       	ret
    1402:	0a 26       	eor	r0, r26
    1404:	09 f4       	brne	.+2      	; 0x1408 <__fp_cmp+0x3e>
    1406:	a1 40       	sbci	r26, 0x01	; 1
    1408:	a6 95       	lsr	r26
    140a:	8f ef       	ldi	r24, 0xFF	; 255
    140c:	81 1d       	adc	r24, r1
    140e:	81 1d       	adc	r24, r1
    1410:	08 95       	ret

00001412 <__fp_split3>:
    1412:	57 fd       	sbrc	r21, 7
    1414:	90 58       	subi	r25, 0x80	; 128
    1416:	44 0f       	add	r20, r20
    1418:	55 1f       	adc	r21, r21
    141a:	59 f0       	breq	.+22     	; 0x1432 <__fp_splitA+0x10>
    141c:	5f 3f       	cpi	r21, 0xFF	; 255
    141e:	71 f0       	breq	.+28     	; 0x143c <__fp_splitA+0x1a>
    1420:	47 95       	ror	r20

00001422 <__fp_splitA>:
    1422:	88 0f       	add	r24, r24
    1424:	97 fb       	bst	r25, 7
    1426:	99 1f       	adc	r25, r25
    1428:	61 f0       	breq	.+24     	; 0x1442 <__fp_splitA+0x20>
    142a:	9f 3f       	cpi	r25, 0xFF	; 255
    142c:	79 f0       	breq	.+30     	; 0x144c <__fp_splitA+0x2a>
    142e:	87 95       	ror	r24
    1430:	08 95       	ret
    1432:	12 16       	cp	r1, r18
    1434:	13 06       	cpc	r1, r19
    1436:	14 06       	cpc	r1, r20
    1438:	55 1f       	adc	r21, r21
    143a:	f2 cf       	rjmp	.-28     	; 0x1420 <__fp_split3+0xe>
    143c:	46 95       	lsr	r20
    143e:	f1 df       	rcall	.-30     	; 0x1422 <__fp_splitA>
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <__fp_splitA+0x30>
    1442:	16 16       	cp	r1, r22
    1444:	17 06       	cpc	r1, r23
    1446:	18 06       	cpc	r1, r24
    1448:	99 1f       	adc	r25, r25
    144a:	f1 cf       	rjmp	.-30     	; 0x142e <__fp_splitA+0xc>
    144c:	86 95       	lsr	r24
    144e:	71 05       	cpc	r23, r1
    1450:	61 05       	cpc	r22, r1
    1452:	08 94       	sec
    1454:	08 95       	ret

00001456 <__fp_zero>:
    1456:	e8 94       	clt

00001458 <__fp_szero>:
    1458:	bb 27       	eor	r27, r27
    145a:	66 27       	eor	r22, r22
    145c:	77 27       	eor	r23, r23
    145e:	cb 01       	movw	r24, r22
    1460:	97 f9       	bld	r25, 7
    1462:	08 95       	ret

00001464 <__gesf2>:
    1464:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fp_cmp>
    1468:	08 f4       	brcc	.+2      	; 0x146c <__gesf2+0x8>
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	08 95       	ret

0000146e <__mulsf3>:
    146e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3x>
    1472:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_round>
    1476:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscA>
    147a:	38 f0       	brcs	.+14     	; 0x148a <__mulsf3+0x1c>
    147c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_pscB>
    1480:	20 f0       	brcs	.+8      	; 0x148a <__mulsf3+0x1c>
    1482:	95 23       	and	r25, r21
    1484:	11 f0       	breq	.+4      	; 0x148a <__mulsf3+0x1c>
    1486:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    148a:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__fp_nan>
    148e:	11 24       	eor	r1, r1
    1490:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__fp_szero>

00001494 <__mulsf3x>:
    1494:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_split3>
    1498:	70 f3       	brcs	.-36     	; 0x1476 <__mulsf3+0x8>

0000149a <__mulsf3_pse>:
    149a:	95 9f       	mul	r25, r21
    149c:	c1 f3       	breq	.-16     	; 0x148e <__mulsf3+0x20>
    149e:	95 0f       	add	r25, r21
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	55 1f       	adc	r21, r21
    14a4:	62 9f       	mul	r22, r18
    14a6:	f0 01       	movw	r30, r0
    14a8:	72 9f       	mul	r23, r18
    14aa:	bb 27       	eor	r27, r27
    14ac:	f0 0d       	add	r31, r0
    14ae:	b1 1d       	adc	r27, r1
    14b0:	63 9f       	mul	r22, r19
    14b2:	aa 27       	eor	r26, r26
    14b4:	f0 0d       	add	r31, r0
    14b6:	b1 1d       	adc	r27, r1
    14b8:	aa 1f       	adc	r26, r26
    14ba:	64 9f       	mul	r22, r20
    14bc:	66 27       	eor	r22, r22
    14be:	b0 0d       	add	r27, r0
    14c0:	a1 1d       	adc	r26, r1
    14c2:	66 1f       	adc	r22, r22
    14c4:	82 9f       	mul	r24, r18
    14c6:	22 27       	eor	r18, r18
    14c8:	b0 0d       	add	r27, r0
    14ca:	a1 1d       	adc	r26, r1
    14cc:	62 1f       	adc	r22, r18
    14ce:	73 9f       	mul	r23, r19
    14d0:	b0 0d       	add	r27, r0
    14d2:	a1 1d       	adc	r26, r1
    14d4:	62 1f       	adc	r22, r18
    14d6:	83 9f       	mul	r24, r19
    14d8:	a0 0d       	add	r26, r0
    14da:	61 1d       	adc	r22, r1
    14dc:	22 1f       	adc	r18, r18
    14de:	74 9f       	mul	r23, r20
    14e0:	33 27       	eor	r19, r19
    14e2:	a0 0d       	add	r26, r0
    14e4:	61 1d       	adc	r22, r1
    14e6:	23 1f       	adc	r18, r19
    14e8:	84 9f       	mul	r24, r20
    14ea:	60 0d       	add	r22, r0
    14ec:	21 1d       	adc	r18, r1
    14ee:	82 2f       	mov	r24, r18
    14f0:	76 2f       	mov	r23, r22
    14f2:	6a 2f       	mov	r22, r26
    14f4:	11 24       	eor	r1, r1
    14f6:	9f 57       	subi	r25, 0x7F	; 127
    14f8:	50 40       	sbci	r21, 0x00	; 0
    14fa:	9a f0       	brmi	.+38     	; 0x1522 <__mulsf3_pse+0x88>
    14fc:	f1 f0       	breq	.+60     	; 0x153a <__mulsf3_pse+0xa0>
    14fe:	88 23       	and	r24, r24
    1500:	4a f0       	brmi	.+18     	; 0x1514 <__mulsf3_pse+0x7a>
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	bb 1f       	adc	r27, r27
    1508:	66 1f       	adc	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	88 1f       	adc	r24, r24
    150e:	91 50       	subi	r25, 0x01	; 1
    1510:	50 40       	sbci	r21, 0x00	; 0
    1512:	a9 f7       	brne	.-22     	; 0x14fe <__mulsf3_pse+0x64>
    1514:	9e 3f       	cpi	r25, 0xFE	; 254
    1516:	51 05       	cpc	r21, r1
    1518:	80 f0       	brcs	.+32     	; 0x153a <__mulsf3_pse+0xa0>
    151a:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    151e:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__fp_szero>
    1522:	5f 3f       	cpi	r21, 0xFF	; 255
    1524:	e4 f3       	brlt	.-8      	; 0x151e <__mulsf3_pse+0x84>
    1526:	98 3e       	cpi	r25, 0xE8	; 232
    1528:	d4 f3       	brlt	.-12     	; 0x151e <__mulsf3_pse+0x84>
    152a:	86 95       	lsr	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b7 95       	ror	r27
    1532:	f7 95       	ror	r31
    1534:	e7 95       	ror	r30
    1536:	9f 5f       	subi	r25, 0xFF	; 255
    1538:	c1 f7       	brne	.-16     	; 0x152a <__mulsf3_pse+0x90>
    153a:	fe 2b       	or	r31, r30
    153c:	88 0f       	add	r24, r24
    153e:	91 1d       	adc	r25, r1
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	97 f9       	bld	r25, 7
    1546:	08 95       	ret

00001548 <__fp_inf>:
    1548:	97 f9       	bld	r25, 7
    154a:	9f 67       	ori	r25, 0x7F	; 127
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	08 95       	ret

00001554 <__fp_nan>:
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	80 ec       	ldi	r24, 0xC0	; 192
    1558:	08 95       	ret

0000155a <__fp_pscA>:
    155a:	00 24       	eor	r0, r0
    155c:	0a 94       	dec	r0
    155e:	16 16       	cp	r1, r22
    1560:	17 06       	cpc	r1, r23
    1562:	18 06       	cpc	r1, r24
    1564:	09 06       	cpc	r0, r25
    1566:	08 95       	ret

00001568 <__fp_pscB>:
    1568:	00 24       	eor	r0, r0
    156a:	0a 94       	dec	r0
    156c:	12 16       	cp	r1, r18
    156e:	13 06       	cpc	r1, r19
    1570:	14 06       	cpc	r1, r20
    1572:	05 06       	cpc	r0, r21
    1574:	08 95       	ret

00001576 <__fp_round>:
    1576:	09 2e       	mov	r0, r25
    1578:	03 94       	inc	r0
    157a:	00 0c       	add	r0, r0
    157c:	11 f4       	brne	.+4      	; 0x1582 <__fp_round+0xc>
    157e:	88 23       	and	r24, r24
    1580:	52 f0       	brmi	.+20     	; 0x1596 <__fp_round+0x20>
    1582:	bb 0f       	add	r27, r27
    1584:	40 f4       	brcc	.+16     	; 0x1596 <__fp_round+0x20>
    1586:	bf 2b       	or	r27, r31
    1588:	11 f4       	brne	.+4      	; 0x158e <__fp_round+0x18>
    158a:	60 ff       	sbrs	r22, 0
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__fp_round+0x20>
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	08 95       	ret

00001598 <__divmodsi4>:
    1598:	05 2e       	mov	r0, r21
    159a:	97 fb       	bst	r25, 7
    159c:	1e f4       	brtc	.+6      	; 0x15a4 <__divmodsi4+0xc>
    159e:	00 94       	com	r0
    15a0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__negsi2>
    15a4:	57 fd       	sbrc	r21, 7
    15a6:	07 d0       	rcall	.+14     	; 0x15b6 <__divmodsi4_neg2>
    15a8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__udivmodsi4>
    15ac:	07 fc       	sbrc	r0, 7
    15ae:	03 d0       	rcall	.+6      	; 0x15b6 <__divmodsi4_neg2>
    15b0:	4e f4       	brtc	.+18     	; 0x15c4 <__divmodsi4_exit>
    15b2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__negsi2>

000015b6 <__divmodsi4_neg2>:
    15b6:	50 95       	com	r21
    15b8:	40 95       	com	r20
    15ba:	30 95       	com	r19
    15bc:	21 95       	neg	r18
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	4f 4f       	sbci	r20, 0xFF	; 255
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255

000015c4 <__divmodsi4_exit>:
    15c4:	08 95       	ret

000015c6 <__negsi2>:
    15c6:	90 95       	com	r25
    15c8:	80 95       	com	r24
    15ca:	70 95       	com	r23
    15cc:	61 95       	neg	r22
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	8f 4f       	sbci	r24, 0xFF	; 255
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	08 95       	ret

000015d6 <__tablejump2__>:
    15d6:	ee 0f       	add	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	05 90       	lpm	r0, Z+
    15dc:	f4 91       	lpm	r31, Z
    15de:	e0 2d       	mov	r30, r0
    15e0:	09 94       	ijmp

000015e2 <__muluhisi3>:
    15e2:	0e 94 1e 0b 	call	0x163c	; 0x163c <__umulhisi3>
    15e6:	a5 9f       	mul	r26, r21
    15e8:	90 0d       	add	r25, r0
    15ea:	b4 9f       	mul	r27, r20
    15ec:	90 0d       	add	r25, r0
    15ee:	a4 9f       	mul	r26, r20
    15f0:	80 0d       	add	r24, r0
    15f2:	91 1d       	adc	r25, r1
    15f4:	11 24       	eor	r1, r1
    15f6:	08 95       	ret

000015f8 <__udivmodsi4>:
    15f8:	a1 e2       	ldi	r26, 0x21	; 33
    15fa:	1a 2e       	mov	r1, r26
    15fc:	aa 1b       	sub	r26, r26
    15fe:	bb 1b       	sub	r27, r27
    1600:	fd 01       	movw	r30, r26
    1602:	0d c0       	rjmp	.+26     	; 0x161e <__udivmodsi4_ep>

00001604 <__udivmodsi4_loop>:
    1604:	aa 1f       	adc	r26, r26
    1606:	bb 1f       	adc	r27, r27
    1608:	ee 1f       	adc	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	a2 17       	cp	r26, r18
    160e:	b3 07       	cpc	r27, r19
    1610:	e4 07       	cpc	r30, r20
    1612:	f5 07       	cpc	r31, r21
    1614:	20 f0       	brcs	.+8      	; 0x161e <__udivmodsi4_ep>
    1616:	a2 1b       	sub	r26, r18
    1618:	b3 0b       	sbc	r27, r19
    161a:	e4 0b       	sbc	r30, r20
    161c:	f5 0b       	sbc	r31, r21

0000161e <__udivmodsi4_ep>:
    161e:	66 1f       	adc	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	88 1f       	adc	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	1a 94       	dec	r1
    1628:	69 f7       	brne	.-38     	; 0x1604 <__udivmodsi4_loop>
    162a:	60 95       	com	r22
    162c:	70 95       	com	r23
    162e:	80 95       	com	r24
    1630:	90 95       	com	r25
    1632:	9b 01       	movw	r18, r22
    1634:	ac 01       	movw	r20, r24
    1636:	bd 01       	movw	r22, r26
    1638:	cf 01       	movw	r24, r30
    163a:	08 95       	ret

0000163c <__umulhisi3>:
    163c:	a2 9f       	mul	r26, r18
    163e:	b0 01       	movw	r22, r0
    1640:	b3 9f       	mul	r27, r19
    1642:	c0 01       	movw	r24, r0
    1644:	a3 9f       	mul	r26, r19
    1646:	70 0d       	add	r23, r0
    1648:	81 1d       	adc	r24, r1
    164a:	11 24       	eor	r1, r1
    164c:	91 1d       	adc	r25, r1
    164e:	b2 9f       	mul	r27, r18
    1650:	70 0d       	add	r23, r0
    1652:	81 1d       	adc	r24, r1
    1654:	11 24       	eor	r1, r1
    1656:	91 1d       	adc	r25, r1
    1658:	08 95       	ret

0000165a <_exit>:
    165a:	f8 94       	cli

0000165c <__stop_program>:
    165c:	ff cf       	rjmp	.-2      	; 0x165c <__stop_program>
