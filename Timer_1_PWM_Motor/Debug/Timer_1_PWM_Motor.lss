
Timer_1_PWM_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e9a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000f0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000880  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000689  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bec  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00002b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000412  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000247  00000000  00000000  0000309e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000032e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	9b 00       	.word	0x009b	; ????
  56:	b2 00       	.word	0x00b2	; ????
  58:	c9 00       	.word	0x00c9	; ????
  5a:	e0 00       	.word	0x00e0	; ????
  5c:	f7 00       	.word	0x00f7	; ????
  5e:	0e 01       	movw	r0, r28
  60:	25 01       	movw	r4, r10
  62:	3c 01       	movw	r6, r24
  64:	53 01       	movw	r10, r6
  66:	6a 01       	movw	r12, r20
  68:	81 01       	movw	r16, r2
  6a:	98 01       	movw	r18, r16
  6c:	af 01       	movw	r20, r30
  6e:	c6 01       	movw	r24, r12
  70:	dd 01       	movw	r26, r26
  72:	f4 01       	movw	r30, r8
  74:	0b 02       	muls	r16, r27
  76:	22 02       	muls	r18, r18
  78:	39 02       	muls	r19, r25
  7a:	50 02       	muls	r21, r16
  7c:	67 02       	muls	r22, r23
  7e:	7e 02       	muls	r23, r30
  80:	95 02       	muls	r25, r21
  82:	ac 02       	muls	r26, r28
  84:	c3 02       	muls	r28, r19
  86:	da 02       	muls	r29, r26
  88:	f1 02       	muls	r31, r17
  8a:	08 03       	fmul	r16, r16
  8c:	1f 03       	fmul	r17, r23
  8e:	36 03       	mulsu	r19, r22
  90:	4d 03       	fmul	r20, r21
  92:	64 03       	mulsu	r22, r20
  94:	9f 03       	fmulsu	r17, r23
  96:	b6 03       	fmuls	r19, r22
  98:	cd 03       	fmulsu	r20, r21
  9a:	e4 03       	fmuls	r22, r20
  9c:	fb 03       	fmulsu	r23, r19
  9e:	12 04       	cpc	r1, r2
  a0:	29 04       	cpc	r2, r9
  a2:	40 04       	cpc	r4, r0
  a4:	57 04       	cpc	r5, r7
  a6:	6e 04       	cpc	r6, r14
  a8:	85 04       	cpc	r8, r5
  aa:	9c 04       	cpc	r9, r12
  ac:	b3 04       	cpc	r11, r3
  ae:	ca 04       	cpc	r12, r10
  b0:	e1 04       	cpc	r14, r1
  b2:	f8 04       	cpc	r15, r8
  b4:	0f 05       	cpc	r16, r15
  b6:	26 05       	cpc	r18, r6
  b8:	3d 05       	cpc	r19, r13
  ba:	54 05       	cpc	r21, r4
  bc:	6b 05       	cpc	r22, r11
  be:	82 05       	cpc	r24, r2
  c0:	99 05       	cpc	r25, r9
  c2:	b0 05       	cpc	r27, r0
  c4:	c7 05       	cpc	r28, r7
  c6:	de 05       	cpc	r29, r14
  c8:	f5 05       	cpc	r31, r5
  ca:	0c 06       	cpc	r0, r28
  cc:	23 06       	cpc	r2, r19
  ce:	3a 06       	cpc	r3, r26
  d0:	51 06       	cpc	r5, r17
  d2:	68 06       	cpc	r6, r24

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf e5       	ldi	r28, 0x5F	; 95
  da:	d8 e0       	ldi	r29, 0x08	; 8
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_clear_bss>:
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	a0 e6       	ldi	r26, 0x60	; 96
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	a4 36       	cpi	r26, 0x64	; 100
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
  f0:	0e 94 86 06 	call	0xd0c	; 0xd0c <main>
  f4:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <DIO_WritePin>:
	case PIN31: Result=Get_Bit(PIND,PIN7);break;
	
	default: break;
	}
	return Result;
}
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <DIO_WritePin+0x6>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	89 83       	std	Y+1, r24	; 0x01
 108:	6a 83       	std	Y+2, r22	; 0x02
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	09 2e       	mov	r0, r25
 112:	00 0c       	add	r0, r0
 114:	aa 0b       	sbc	r26, r26
 116:	bb 0b       	sbc	r27, r27
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	2f e1       	ldi	r18, 0x1F	; 31
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	84 1b       	sub	r24, r20
 122:	95 0b       	sbc	r25, r21
 124:	28 17       	cp	r18, r24
 126:	39 07       	cpc	r19, r25
 128:	08 f4       	brcc	.+2      	; 0x12c <DIO_WritePin+0x30>
 12a:	e5 c2       	rjmp	.+1482   	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 12c:	86 5d       	subi	r24, 0xD6	; 214
 12e:	9f 4f       	sbci	r25, 0xFF	; 255
 130:	fc 01       	movw	r30, r24
 132:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__tablejump2__>
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	88 23       	and	r24, r24
 13a:	51 f4       	brne	.+20     	; 0x150 <DIO_WritePin+0x54>
 13c:	8b e3       	ldi	r24, 0x3B	; 59
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2b e3       	ldi	r18, 0x3B	; 59
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	2e 7f       	andi	r18, 0xFE	; 254
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	d4 c2       	rjmp	.+1448   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 150:	8b e3       	ldi	r24, 0x3B	; 59
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	2b e3       	ldi	r18, 0x3B	; 59
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	21 60       	ori	r18, 0x01	; 1
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	ca c2       	rjmp	.+1428   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	88 23       	and	r24, r24
 168:	51 f4       	brne	.+20     	; 0x17e <DIO_WritePin+0x82>
 16a:	8b e3       	ldi	r24, 0x3B	; 59
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	2b e3       	ldi	r18, 0x3B	; 59
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	20 81       	ld	r18, Z
 176:	2d 7f       	andi	r18, 0xFD	; 253
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
 17c:	bd c2       	rjmp	.+1402   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 17e:	8b e3       	ldi	r24, 0x3B	; 59
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	2b e3       	ldi	r18, 0x3B	; 59
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	22 60       	ori	r18, 0x02	; 2
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
 190:	b3 c2       	rjmp	.+1382   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	88 23       	and	r24, r24
 196:	51 f4       	brne	.+20     	; 0x1ac <DIO_WritePin+0xb0>
 198:	8b e3       	ldi	r24, 0x3B	; 59
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	2b e3       	ldi	r18, 0x3B	; 59
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	2b 7f       	andi	r18, 0xFB	; 251
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
 1aa:	a6 c2       	rjmp	.+1356   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 1ac:	8b e3       	ldi	r24, 0x3B	; 59
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	2b e3       	ldi	r18, 0x3B	; 59
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	24 60       	ori	r18, 0x04	; 4
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
 1be:	9c c2       	rjmp	.+1336   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	88 23       	and	r24, r24
 1c4:	51 f4       	brne	.+20     	; 0x1da <DIO_WritePin+0xde>
 1c6:	8b e3       	ldi	r24, 0x3B	; 59
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2b e3       	ldi	r18, 0x3B	; 59
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	27 7f       	andi	r18, 0xF7	; 247
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
 1d8:	8f c2       	rjmp	.+1310   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 1da:	8b e3       	ldi	r24, 0x3B	; 59
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	2b e3       	ldi	r18, 0x3B	; 59
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	28 60       	ori	r18, 0x08	; 8
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
 1ec:	85 c2       	rjmp	.+1290   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	88 23       	and	r24, r24
 1f2:	51 f4       	brne	.+20     	; 0x208 <DIO_WritePin+0x10c>
 1f4:	8b e3       	ldi	r24, 0x3B	; 59
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	2b e3       	ldi	r18, 0x3B	; 59
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	f9 01       	movw	r30, r18
 1fe:	20 81       	ld	r18, Z
 200:	2f 7e       	andi	r18, 0xEF	; 239
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
 206:	78 c2       	rjmp	.+1264   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 208:	8b e3       	ldi	r24, 0x3B	; 59
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	2b e3       	ldi	r18, 0x3B	; 59
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	20 81       	ld	r18, Z
 214:	20 61       	ori	r18, 0x10	; 16
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
 21a:	6e c2       	rjmp	.+1244   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	88 23       	and	r24, r24
 220:	51 f4       	brne	.+20     	; 0x236 <DIO_WritePin+0x13a>
 222:	8b e3       	ldi	r24, 0x3B	; 59
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	2b e3       	ldi	r18, 0x3B	; 59
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	20 81       	ld	r18, Z
 22e:	2f 7d       	andi	r18, 0xDF	; 223
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
 234:	61 c2       	rjmp	.+1218   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 236:	8b e3       	ldi	r24, 0x3B	; 59
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	2b e3       	ldi	r18, 0x3B	; 59
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	20 62       	ori	r18, 0x20	; 32
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
 248:	57 c2       	rjmp	.+1198   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	88 23       	and	r24, r24
 24e:	51 f4       	brne	.+20     	; 0x264 <DIO_WritePin+0x168>
 250:	8b e3       	ldi	r24, 0x3B	; 59
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	2b e3       	ldi	r18, 0x3B	; 59
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	f9 01       	movw	r30, r18
 25a:	20 81       	ld	r18, Z
 25c:	2f 7b       	andi	r18, 0xBF	; 191
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
 262:	4a c2       	rjmp	.+1172   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 264:	8b e3       	ldi	r24, 0x3B	; 59
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	2b e3       	ldi	r18, 0x3B	; 59
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	f9 01       	movw	r30, r18
 26e:	20 81       	ld	r18, Z
 270:	20 64       	ori	r18, 0x40	; 64
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
 276:	40 c2       	rjmp	.+1152   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	88 23       	and	r24, r24
 27c:	51 f4       	brne	.+20     	; 0x292 <DIO_WritePin+0x196>
 27e:	8b e3       	ldi	r24, 0x3B	; 59
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	2b e3       	ldi	r18, 0x3B	; 59
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	2f 77       	andi	r18, 0x7F	; 127
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
 290:	33 c2       	rjmp	.+1126   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 292:	8b e3       	ldi	r24, 0x3B	; 59
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2b e3       	ldi	r18, 0x3B	; 59
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	20 68       	ori	r18, 0x80	; 128
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
 2a4:	29 c2       	rjmp	.+1106   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	88 23       	and	r24, r24
 2aa:	51 f4       	brne	.+20     	; 0x2c0 <DIO_WritePin+0x1c4>
 2ac:	88 e3       	ldi	r24, 0x38	; 56
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	28 e3       	ldi	r18, 0x38	; 56
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	20 81       	ld	r18, Z
 2b8:	2e 7f       	andi	r18, 0xFE	; 254
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
 2be:	1c c2       	rjmp	.+1080   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 2c0:	88 e3       	ldi	r24, 0x38	; 56
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	28 e3       	ldi	r18, 0x38	; 56
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	20 81       	ld	r18, Z
 2cc:	21 60       	ori	r18, 0x01	; 1
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
 2d2:	12 c2       	rjmp	.+1060   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	88 23       	and	r24, r24
 2d8:	51 f4       	brne	.+20     	; 0x2ee <DIO_WritePin+0x1f2>
 2da:	88 e3       	ldi	r24, 0x38	; 56
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	28 e3       	ldi	r18, 0x38	; 56
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	f9 01       	movw	r30, r18
 2e4:	20 81       	ld	r18, Z
 2e6:	2d 7f       	andi	r18, 0xFD	; 253
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
 2ec:	05 c2       	rjmp	.+1034   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 2ee:	88 e3       	ldi	r24, 0x38	; 56
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	28 e3       	ldi	r18, 0x38	; 56
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	f9 01       	movw	r30, r18
 2f8:	20 81       	ld	r18, Z
 2fa:	22 60       	ori	r18, 0x02	; 2
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
 300:	fb c1       	rjmp	.+1014   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	88 23       	and	r24, r24
 306:	51 f4       	brne	.+20     	; 0x31c <DIO_WritePin+0x220>
 308:	88 e3       	ldi	r24, 0x38	; 56
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	28 e3       	ldi	r18, 0x38	; 56
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	2b 7f       	andi	r18, 0xFB	; 251
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
 31a:	ee c1       	rjmp	.+988    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 31c:	88 e3       	ldi	r24, 0x38	; 56
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	28 e3       	ldi	r18, 0x38	; 56
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	f9 01       	movw	r30, r18
 326:	20 81       	ld	r18, Z
 328:	24 60       	ori	r18, 0x04	; 4
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
 32e:	e4 c1       	rjmp	.+968    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	88 23       	and	r24, r24
 334:	51 f4       	brne	.+20     	; 0x34a <DIO_WritePin+0x24e>
 336:	88 e3       	ldi	r24, 0x38	; 56
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	28 e3       	ldi	r18, 0x38	; 56
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	f9 01       	movw	r30, r18
 340:	20 81       	ld	r18, Z
 342:	27 7f       	andi	r18, 0xF7	; 247
 344:	fc 01       	movw	r30, r24
 346:	20 83       	st	Z, r18
 348:	d7 c1       	rjmp	.+942    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 34a:	88 e3       	ldi	r24, 0x38	; 56
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	28 e3       	ldi	r18, 0x38	; 56
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	28 60       	ori	r18, 0x08	; 8
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
 35c:	cd c1       	rjmp	.+922    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	88 23       	and	r24, r24
 362:	51 f4       	brne	.+20     	; 0x378 <DIO_WritePin+0x27c>
 364:	88 e3       	ldi	r24, 0x38	; 56
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	28 e3       	ldi	r18, 0x38	; 56
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	20 81       	ld	r18, Z
 370:	2f 7e       	andi	r18, 0xEF	; 239
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
 376:	c0 c1       	rjmp	.+896    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 378:	88 e3       	ldi	r24, 0x38	; 56
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	28 e3       	ldi	r18, 0x38	; 56
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	20 81       	ld	r18, Z
 384:	20 61       	ori	r18, 0x10	; 16
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
 38a:	b6 c1       	rjmp	.+876    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	88 23       	and	r24, r24
 390:	51 f4       	brne	.+20     	; 0x3a6 <DIO_WritePin+0x2aa>
 392:	88 e3       	ldi	r24, 0x38	; 56
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	28 e3       	ldi	r18, 0x38	; 56
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	f9 01       	movw	r30, r18
 39c:	20 81       	ld	r18, Z
 39e:	2f 7d       	andi	r18, 0xDF	; 223
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
 3a4:	a9 c1       	rjmp	.+850    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 3a6:	88 e3       	ldi	r24, 0x38	; 56
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	28 e3       	ldi	r18, 0x38	; 56
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	f9 01       	movw	r30, r18
 3b0:	20 81       	ld	r18, Z
 3b2:	20 62       	ori	r18, 0x20	; 32
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 83       	st	Z, r18
 3b8:	9f c1       	rjmp	.+830    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	88 23       	and	r24, r24
 3be:	51 f4       	brne	.+20     	; 0x3d4 <DIO_WritePin+0x2d8>
 3c0:	88 e3       	ldi	r24, 0x38	; 56
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	28 e3       	ldi	r18, 0x38	; 56
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	f9 01       	movw	r30, r18
 3ca:	20 81       	ld	r18, Z
 3cc:	2f 7b       	andi	r18, 0xBF	; 191
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
 3d2:	92 c1       	rjmp	.+804    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 3d4:	88 e3       	ldi	r24, 0x38	; 56
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	28 e3       	ldi	r18, 0x38	; 56
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	20 81       	ld	r18, Z
 3e0:	20 64       	ori	r18, 0x40	; 64
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
 3e6:	88 c1       	rjmp	.+784    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	88 23       	and	r24, r24
 3ec:	51 f4       	brne	.+20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ee:	88 e3       	ldi	r24, 0x38	; 56
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	28 e3       	ldi	r18, 0x38	; 56
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	20 81       	ld	r18, Z
 3fa:	2f 77       	andi	r18, 0x7F	; 127
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 83       	st	Z, r18
 400:	7b c1       	rjmp	.+758    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 402:	88 e3       	ldi	r24, 0x38	; 56
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	28 e3       	ldi	r18, 0x38	; 56
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	f9 01       	movw	r30, r18
 40c:	20 81       	ld	r18, Z
 40e:	20 68       	ori	r18, 0x80	; 128
 410:	fc 01       	movw	r30, r24
 412:	20 83       	st	Z, r18
 414:	71 c1       	rjmp	.+738    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	88 23       	and	r24, r24
 41a:	51 f4       	brne	.+20     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41c:	85 e3       	ldi	r24, 0x35	; 53
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	25 e3       	ldi	r18, 0x35	; 53
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	f9 01       	movw	r30, r18
 426:	20 81       	ld	r18, Z
 428:	2e 7f       	andi	r18, 0xFE	; 254
 42a:	fc 01       	movw	r30, r24
 42c:	20 83       	st	Z, r18
 42e:	64 c1       	rjmp	.+712    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 430:	85 e3       	ldi	r24, 0x35	; 53
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	25 e3       	ldi	r18, 0x35	; 53
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	21 60       	ori	r18, 0x01	; 1
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
 442:	5a c1       	rjmp	.+692    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	88 23       	and	r24, r24
 448:	51 f4       	brne	.+20     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 44a:	85 e3       	ldi	r24, 0x35	; 53
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	25 e3       	ldi	r18, 0x35	; 53
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	20 81       	ld	r18, Z
 456:	2d 7f       	andi	r18, 0xFD	; 253
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
 45c:	4d c1       	rjmp	.+666    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 45e:	85 e3       	ldi	r24, 0x35	; 53
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	25 e3       	ldi	r18, 0x35	; 53
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	f9 01       	movw	r30, r18
 468:	20 81       	ld	r18, Z
 46a:	22 60       	ori	r18, 0x02	; 2
 46c:	fc 01       	movw	r30, r24
 46e:	20 83       	st	Z, r18
 470:	43 c1       	rjmp	.+646    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	88 23       	and	r24, r24
 476:	51 f4       	brne	.+20     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 478:	85 e3       	ldi	r24, 0x35	; 53
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	25 e3       	ldi	r18, 0x35	; 53
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	f9 01       	movw	r30, r18
 482:	20 81       	ld	r18, Z
 484:	2b 7f       	andi	r18, 0xFB	; 251
 486:	fc 01       	movw	r30, r24
 488:	20 83       	st	Z, r18
 48a:	36 c1       	rjmp	.+620    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 48c:	85 e3       	ldi	r24, 0x35	; 53
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	25 e3       	ldi	r18, 0x35	; 53
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	f9 01       	movw	r30, r18
 496:	20 81       	ld	r18, Z
 498:	24 60       	ori	r18, 0x04	; 4
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
 49e:	2c c1       	rjmp	.+600    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	88 23       	and	r24, r24
 4a4:	51 f4       	brne	.+20     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4a6:	85 e3       	ldi	r24, 0x35	; 53
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	25 e3       	ldi	r18, 0x35	; 53
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	20 81       	ld	r18, Z
 4b2:	27 7f       	andi	r18, 0xF7	; 247
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
 4b8:	1f c1       	rjmp	.+574    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 4ba:	85 e3       	ldi	r24, 0x35	; 53
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	25 e3       	ldi	r18, 0x35	; 53
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	f9 01       	movw	r30, r18
 4c4:	20 81       	ld	r18, Z
 4c6:	28 60       	ori	r18, 0x08	; 8
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
 4cc:	15 c1       	rjmp	.+554    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	88 23       	and	r24, r24
 4d2:	51 f4       	brne	.+20     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4d4:	85 e3       	ldi	r24, 0x35	; 53
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	25 e3       	ldi	r18, 0x35	; 53
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	20 81       	ld	r18, Z
 4e0:	2f 7e       	andi	r18, 0xEF	; 239
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
 4e6:	08 c1       	rjmp	.+528    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 4e8:	85 e3       	ldi	r24, 0x35	; 53
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	25 e3       	ldi	r18, 0x35	; 53
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	20 81       	ld	r18, Z
 4f4:	20 61       	ori	r18, 0x10	; 16
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
 4fa:	fe c0       	rjmp	.+508    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	88 23       	and	r24, r24
 500:	51 f4       	brne	.+20     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 502:	85 e3       	ldi	r24, 0x35	; 53
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	25 e3       	ldi	r18, 0x35	; 53
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	f9 01       	movw	r30, r18
 50c:	20 81       	ld	r18, Z
 50e:	2f 7d       	andi	r18, 0xDF	; 223
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
 514:	f1 c0       	rjmp	.+482    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 516:	85 e3       	ldi	r24, 0x35	; 53
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	25 e3       	ldi	r18, 0x35	; 53
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	f9 01       	movw	r30, r18
 520:	20 81       	ld	r18, Z
 522:	20 62       	ori	r18, 0x20	; 32
 524:	fc 01       	movw	r30, r24
 526:	20 83       	st	Z, r18
 528:	e7 c0       	rjmp	.+462    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	88 23       	and	r24, r24
 52e:	51 f4       	brne	.+20     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 530:	85 e3       	ldi	r24, 0x35	; 53
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	25 e3       	ldi	r18, 0x35	; 53
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	f9 01       	movw	r30, r18
 53a:	20 81       	ld	r18, Z
 53c:	2f 7b       	andi	r18, 0xBF	; 191
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18
 542:	da c0       	rjmp	.+436    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 544:	85 e3       	ldi	r24, 0x35	; 53
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	25 e3       	ldi	r18, 0x35	; 53
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	20 64       	ori	r18, 0x40	; 64
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
 556:	d0 c0       	rjmp	.+416    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 558:	8a 81       	ldd	r24, Y+2	; 0x02
 55a:	88 23       	and	r24, r24
 55c:	51 f4       	brne	.+20     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 55e:	85 e3       	ldi	r24, 0x35	; 53
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	25 e3       	ldi	r18, 0x35	; 53
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	f9 01       	movw	r30, r18
 568:	20 81       	ld	r18, Z
 56a:	2f 77       	andi	r18, 0x7F	; 127
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
 570:	c3 c0       	rjmp	.+390    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 572:	85 e3       	ldi	r24, 0x35	; 53
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	25 e3       	ldi	r18, 0x35	; 53
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	f9 01       	movw	r30, r18
 57c:	20 81       	ld	r18, Z
 57e:	20 68       	ori	r18, 0x80	; 128
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
 584:	b9 c0       	rjmp	.+370    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	88 23       	and	r24, r24
 58a:	51 f4       	brne	.+20     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 58c:	82 e3       	ldi	r24, 0x32	; 50
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	22 e3       	ldi	r18, 0x32	; 50
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	f9 01       	movw	r30, r18
 596:	20 81       	ld	r18, Z
 598:	2e 7f       	andi	r18, 0xFE	; 254
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
 59e:	ac c0       	rjmp	.+344    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 5a0:	82 e3       	ldi	r24, 0x32	; 50
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	22 e3       	ldi	r18, 0x32	; 50
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	f9 01       	movw	r30, r18
 5aa:	20 81       	ld	r18, Z
 5ac:	21 60       	ori	r18, 0x01	; 1
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18
 5b2:	a2 c0       	rjmp	.+324    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	88 23       	and	r24, r24
 5b8:	51 f4       	brne	.+20     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5ba:	82 e3       	ldi	r24, 0x32	; 50
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	22 e3       	ldi	r18, 0x32	; 50
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	20 81       	ld	r18, Z
 5c6:	2d 7f       	andi	r18, 0xFD	; 253
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 83       	st	Z, r18
 5cc:	95 c0       	rjmp	.+298    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 5ce:	82 e3       	ldi	r24, 0x32	; 50
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	22 e3       	ldi	r18, 0x32	; 50
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	f9 01       	movw	r30, r18
 5d8:	20 81       	ld	r18, Z
 5da:	22 60       	ori	r18, 0x02	; 2
 5dc:	fc 01       	movw	r30, r24
 5de:	20 83       	st	Z, r18
 5e0:	8b c0       	rjmp	.+278    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	88 23       	and	r24, r24
 5e6:	51 f4       	brne	.+20     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5e8:	82 e3       	ldi	r24, 0x32	; 50
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	22 e3       	ldi	r18, 0x32	; 50
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	f9 01       	movw	r30, r18
 5f2:	20 81       	ld	r18, Z
 5f4:	2b 7f       	andi	r18, 0xFB	; 251
 5f6:	fc 01       	movw	r30, r24
 5f8:	20 83       	st	Z, r18
 5fa:	7e c0       	rjmp	.+252    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 5fc:	82 e3       	ldi	r24, 0x32	; 50
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	22 e3       	ldi	r18, 0x32	; 50
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	f9 01       	movw	r30, r18
 606:	20 81       	ld	r18, Z
 608:	24 60       	ori	r18, 0x04	; 4
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
 60e:	74 c0       	rjmp	.+232    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	88 23       	and	r24, r24
 614:	51 f4       	brne	.+20     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 616:	82 e3       	ldi	r24, 0x32	; 50
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	22 e3       	ldi	r18, 0x32	; 50
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	f9 01       	movw	r30, r18
 620:	20 81       	ld	r18, Z
 622:	27 7f       	andi	r18, 0xF7	; 247
 624:	fc 01       	movw	r30, r24
 626:	20 83       	st	Z, r18
 628:	67 c0       	rjmp	.+206    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 62a:	82 e3       	ldi	r24, 0x32	; 50
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	22 e3       	ldi	r18, 0x32	; 50
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	f9 01       	movw	r30, r18
 634:	20 81       	ld	r18, Z
 636:	28 60       	ori	r18, 0x08	; 8
 638:	fc 01       	movw	r30, r24
 63a:	20 83       	st	Z, r18
 63c:	5d c0       	rjmp	.+186    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 63e:	8a 81       	ldd	r24, Y+2	; 0x02
 640:	88 23       	and	r24, r24
 642:	51 f4       	brne	.+20     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 644:	82 e3       	ldi	r24, 0x32	; 50
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	22 e3       	ldi	r18, 0x32	; 50
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	f9 01       	movw	r30, r18
 64e:	20 81       	ld	r18, Z
 650:	2f 7e       	andi	r18, 0xEF	; 239
 652:	fc 01       	movw	r30, r24
 654:	20 83       	st	Z, r18
 656:	50 c0       	rjmp	.+160    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 658:	82 e3       	ldi	r24, 0x32	; 50
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	22 e3       	ldi	r18, 0x32	; 50
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	f9 01       	movw	r30, r18
 662:	20 81       	ld	r18, Z
 664:	20 61       	ori	r18, 0x10	; 16
 666:	fc 01       	movw	r30, r24
 668:	20 83       	st	Z, r18
 66a:	46 c0       	rjmp	.+140    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	88 23       	and	r24, r24
 670:	51 f4       	brne	.+20     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 672:	82 e3       	ldi	r24, 0x32	; 50
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	22 e3       	ldi	r18, 0x32	; 50
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	f9 01       	movw	r30, r18
 67c:	20 81       	ld	r18, Z
 67e:	2f 7d       	andi	r18, 0xDF	; 223
 680:	fc 01       	movw	r30, r24
 682:	20 83       	st	Z, r18
 684:	39 c0       	rjmp	.+114    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 686:	82 e3       	ldi	r24, 0x32	; 50
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	22 e3       	ldi	r18, 0x32	; 50
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	f9 01       	movw	r30, r18
 690:	20 81       	ld	r18, Z
 692:	20 62       	ori	r18, 0x20	; 32
 694:	fc 01       	movw	r30, r24
 696:	20 83       	st	Z, r18
 698:	2f c0       	rjmp	.+94     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	88 23       	and	r24, r24
 69e:	51 f4       	brne	.+20     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6a0:	82 e3       	ldi	r24, 0x32	; 50
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	22 e3       	ldi	r18, 0x32	; 50
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	f9 01       	movw	r30, r18
 6aa:	20 81       	ld	r18, Z
 6ac:	2f 7b       	andi	r18, 0xBF	; 191
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 83       	st	Z, r18
 6b2:	22 c0       	rjmp	.+68     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6b4:	82 e3       	ldi	r24, 0x32	; 50
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	22 e3       	ldi	r18, 0x32	; 50
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	f9 01       	movw	r30, r18
 6be:	20 81       	ld	r18, Z
 6c0:	20 64       	ori	r18, 0x40	; 64
 6c2:	fc 01       	movw	r30, r24
 6c4:	20 83       	st	Z, r18
 6c6:	18 c0       	rjmp	.+48     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	88 23       	and	r24, r24
 6cc:	51 f4       	brne	.+20     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6ce:	82 e3       	ldi	r24, 0x32	; 50
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	22 e3       	ldi	r18, 0x32	; 50
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	f9 01       	movw	r30, r18
 6d8:	20 81       	ld	r18, Z
 6da:	2f 77       	andi	r18, 0x7F	; 127
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
 6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6e2:	82 e3       	ldi	r24, 0x32	; 50
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	22 e3       	ldi	r18, 0x32	; 50
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	f9 01       	movw	r30, r18
 6ec:	20 81       	ld	r18, Z
 6ee:	20 68       	ori	r18, 0x80	; 128
 6f0:	fc 01       	movw	r30, r24
 6f2:	20 83       	st	Z, r18
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6f6:	00 00       	nop
 6f8:	00 00       	nop
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <DIO_SetPinDirection>:
/* Set the direction of the Pins */
/************************************************************************/


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	00 d0       	rcall	.+0      	; 0x70a <DIO_SetPinDirection+0x6>
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	89 83       	std	Y+1, r24	; 0x01
 710:	6a 83       	std	Y+2, r22	; 0x02
	switch(PinNum){
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	88 2f       	mov	r24, r24
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	09 2e       	mov	r0, r25
 71a:	00 0c       	add	r0, r0
 71c:	aa 0b       	sbc	r26, r26
 71e:	bb 0b       	sbc	r27, r27
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	2f e1       	ldi	r18, 0x1F	; 31
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	84 1b       	sub	r24, r20
 72a:	95 0b       	sbc	r25, r21
 72c:	28 17       	cp	r18, r24
 72e:	39 07       	cpc	r19, r25
 730:	08 f4       	brcc	.+2      	; 0x734 <DIO_SetPinDirection+0x30>
 732:	e5 c2       	rjmp	.+1482   	; 0xcfe <__stack+0x49f>
 734:	86 5b       	subi	r24, 0xB6	; 182
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	fc 01       	movw	r30, r24
 73a:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__tablejump2__>
	case PIN0: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN0);}else{Set_Bit(DDRA,PIN0);};break;
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	51 f4       	brne	.+20     	; 0x758 <DIO_SetPinDirection+0x54>
 744:	8a e3       	ldi	r24, 0x3A	; 58
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	2a e3       	ldi	r18, 0x3A	; 58
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	f9 01       	movw	r30, r18
 74e:	20 81       	ld	r18, Z
 750:	2e 7f       	andi	r18, 0xFE	; 254
 752:	fc 01       	movw	r30, r24
 754:	20 83       	st	Z, r18
 756:	d4 c2       	rjmp	.+1448   	; 0xd00 <__stack+0x4a1>
 758:	8a e3       	ldi	r24, 0x3A	; 58
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	2a e3       	ldi	r18, 0x3A	; 58
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	f9 01       	movw	r30, r18
 762:	20 81       	ld	r18, Z
 764:	21 60       	ori	r18, 0x01	; 1
 766:	fc 01       	movw	r30, r24
 768:	20 83       	st	Z, r18
 76a:	ca c2       	rjmp	.+1428   	; 0xd00 <__stack+0x4a1>
	case PIN1: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN1);}else{Set_Bit(DDRA,PIN1);} ;break;
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	51 f4       	brne	.+20     	; 0x786 <DIO_SetPinDirection+0x82>
 772:	8a e3       	ldi	r24, 0x3A	; 58
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	2a e3       	ldi	r18, 0x3A	; 58
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	f9 01       	movw	r30, r18
 77c:	20 81       	ld	r18, Z
 77e:	2d 7f       	andi	r18, 0xFD	; 253
 780:	fc 01       	movw	r30, r24
 782:	20 83       	st	Z, r18
 784:	bd c2       	rjmp	.+1402   	; 0xd00 <__stack+0x4a1>
 786:	8a e3       	ldi	r24, 0x3A	; 58
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	2a e3       	ldi	r18, 0x3A	; 58
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	f9 01       	movw	r30, r18
 790:	20 81       	ld	r18, Z
 792:	22 60       	ori	r18, 0x02	; 2
 794:	fc 01       	movw	r30, r24
 796:	20 83       	st	Z, r18
 798:	b3 c2       	rjmp	.+1382   	; 0xd00 <__stack+0x4a1>
	case PIN2: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN2);}else{Set_Bit(DDRA,PIN2);} ;break;
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	51 f4       	brne	.+20     	; 0x7b4 <DIO_SetPinDirection+0xb0>
 7a0:	8a e3       	ldi	r24, 0x3A	; 58
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	2a e3       	ldi	r18, 0x3A	; 58
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	f9 01       	movw	r30, r18
 7aa:	20 81       	ld	r18, Z
 7ac:	2b 7f       	andi	r18, 0xFB	; 251
 7ae:	fc 01       	movw	r30, r24
 7b0:	20 83       	st	Z, r18
 7b2:	a6 c2       	rjmp	.+1356   	; 0xd00 <__stack+0x4a1>
 7b4:	8a e3       	ldi	r24, 0x3A	; 58
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	2a e3       	ldi	r18, 0x3A	; 58
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	f9 01       	movw	r30, r18
 7be:	20 81       	ld	r18, Z
 7c0:	24 60       	ori	r18, 0x04	; 4
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18
 7c6:	9c c2       	rjmp	.+1336   	; 0xd00 <__stack+0x4a1>
	case PIN3: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN3);}else{Set_Bit(DDRA,PIN3);} ;break;
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	81 30       	cpi	r24, 0x01	; 1
 7cc:	51 f4       	brne	.+20     	; 0x7e2 <DIO_SetPinDirection+0xde>
 7ce:	8a e3       	ldi	r24, 0x3A	; 58
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	2a e3       	ldi	r18, 0x3A	; 58
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	f9 01       	movw	r30, r18
 7d8:	20 81       	ld	r18, Z
 7da:	27 7f       	andi	r18, 0xF7	; 247
 7dc:	fc 01       	movw	r30, r24
 7de:	20 83       	st	Z, r18
 7e0:	8f c2       	rjmp	.+1310   	; 0xd00 <__stack+0x4a1>
 7e2:	8a e3       	ldi	r24, 0x3A	; 58
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	2a e3       	ldi	r18, 0x3A	; 58
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	f9 01       	movw	r30, r18
 7ec:	20 81       	ld	r18, Z
 7ee:	28 60       	ori	r18, 0x08	; 8
 7f0:	fc 01       	movw	r30, r24
 7f2:	20 83       	st	Z, r18
 7f4:	85 c2       	rjmp	.+1290   	; 0xd00 <__stack+0x4a1>
	case PIN4: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN4);}else{Set_Bit(DDRA,PIN4);} ;break;
 7f6:	8a 81       	ldd	r24, Y+2	; 0x02
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	51 f4       	brne	.+20     	; 0x810 <DIO_SetPinDirection+0x10c>
 7fc:	8a e3       	ldi	r24, 0x3A	; 58
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	2a e3       	ldi	r18, 0x3A	; 58
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	f9 01       	movw	r30, r18
 806:	20 81       	ld	r18, Z
 808:	2f 7e       	andi	r18, 0xEF	; 239
 80a:	fc 01       	movw	r30, r24
 80c:	20 83       	st	Z, r18
 80e:	78 c2       	rjmp	.+1264   	; 0xd00 <__stack+0x4a1>
 810:	8a e3       	ldi	r24, 0x3A	; 58
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	2a e3       	ldi	r18, 0x3A	; 58
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	f9 01       	movw	r30, r18
 81a:	20 81       	ld	r18, Z
 81c:	20 61       	ori	r18, 0x10	; 16
 81e:	fc 01       	movw	r30, r24
 820:	20 83       	st	Z, r18
 822:	6e c2       	rjmp	.+1244   	; 0xd00 <__stack+0x4a1>
	case PIN5: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN5);}else{Set_Bit(DDRA,PIN5);} ;break;
 824:	8a 81       	ldd	r24, Y+2	; 0x02
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	51 f4       	brne	.+20     	; 0x83e <DIO_SetPinDirection+0x13a>
 82a:	8a e3       	ldi	r24, 0x3A	; 58
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	2a e3       	ldi	r18, 0x3A	; 58
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	f9 01       	movw	r30, r18
 834:	20 81       	ld	r18, Z
 836:	2f 7d       	andi	r18, 0xDF	; 223
 838:	fc 01       	movw	r30, r24
 83a:	20 83       	st	Z, r18
 83c:	61 c2       	rjmp	.+1218   	; 0xd00 <__stack+0x4a1>
 83e:	8a e3       	ldi	r24, 0x3A	; 58
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	2a e3       	ldi	r18, 0x3A	; 58
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	f9 01       	movw	r30, r18
 848:	20 81       	ld	r18, Z
 84a:	20 62       	ori	r18, 0x20	; 32
 84c:	fc 01       	movw	r30, r24
 84e:	20 83       	st	Z, r18
 850:	57 c2       	rjmp	.+1198   	; 0xd00 <__stack+0x4a1>
	case PIN6: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN6);}else{Set_Bit(DDRA,PIN6);} ;break;
 852:	8a 81       	ldd	r24, Y+2	; 0x02
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	51 f4       	brne	.+20     	; 0x86c <__stack+0xd>
 858:	8a e3       	ldi	r24, 0x3A	; 58
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	2a e3       	ldi	r18, 0x3A	; 58
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	f9 01       	movw	r30, r18
 862:	20 81       	ld	r18, Z
 864:	2f 7b       	andi	r18, 0xBF	; 191
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
 86a:	4a c2       	rjmp	.+1172   	; 0xd00 <__stack+0x4a1>
 86c:	8a e3       	ldi	r24, 0x3A	; 58
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	2a e3       	ldi	r18, 0x3A	; 58
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	f9 01       	movw	r30, r18
 876:	20 81       	ld	r18, Z
 878:	20 64       	ori	r18, 0x40	; 64
 87a:	fc 01       	movw	r30, r24
 87c:	20 83       	st	Z, r18
 87e:	40 c2       	rjmp	.+1152   	; 0xd00 <__stack+0x4a1>
	case PIN7: if(PinDirection==OUTPUT){Clear_Bit(DDRA,PIN7);}else{Set_Bit(DDRA,PIN7);} ;break;
 880:	8a 81       	ldd	r24, Y+2	; 0x02
 882:	81 30       	cpi	r24, 0x01	; 1
 884:	51 f4       	brne	.+20     	; 0x89a <__stack+0x3b>
 886:	8a e3       	ldi	r24, 0x3A	; 58
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	2a e3       	ldi	r18, 0x3A	; 58
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	f9 01       	movw	r30, r18
 890:	20 81       	ld	r18, Z
 892:	2f 77       	andi	r18, 0x7F	; 127
 894:	fc 01       	movw	r30, r24
 896:	20 83       	st	Z, r18
 898:	33 c2       	rjmp	.+1126   	; 0xd00 <__stack+0x4a1>
 89a:	8a e3       	ldi	r24, 0x3A	; 58
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	2a e3       	ldi	r18, 0x3A	; 58
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	f9 01       	movw	r30, r18
 8a4:	20 81       	ld	r18, Z
 8a6:	20 68       	ori	r18, 0x80	; 128
 8a8:	fc 01       	movw	r30, r24
 8aa:	20 83       	st	Z, r18
 8ac:	29 c2       	rjmp	.+1106   	; 0xd00 <__stack+0x4a1>
	case PIN8: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN0);}else{Set_Bit(DDRB,PIN0);} ;break;
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	51 f4       	brne	.+20     	; 0x8c8 <__stack+0x69>
 8b4:	87 e3       	ldi	r24, 0x37	; 55
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	27 e3       	ldi	r18, 0x37	; 55
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	f9 01       	movw	r30, r18
 8be:	20 81       	ld	r18, Z
 8c0:	2e 7f       	andi	r18, 0xFE	; 254
 8c2:	fc 01       	movw	r30, r24
 8c4:	20 83       	st	Z, r18
 8c6:	1c c2       	rjmp	.+1080   	; 0xd00 <__stack+0x4a1>
 8c8:	87 e3       	ldi	r24, 0x37	; 55
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	27 e3       	ldi	r18, 0x37	; 55
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	f9 01       	movw	r30, r18
 8d2:	20 81       	ld	r18, Z
 8d4:	21 60       	ori	r18, 0x01	; 1
 8d6:	fc 01       	movw	r30, r24
 8d8:	20 83       	st	Z, r18
 8da:	12 c2       	rjmp	.+1060   	; 0xd00 <__stack+0x4a1>
	case PIN9: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN1);}else{Set_Bit(DDRB,PIN1);} ;break;
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	81 30       	cpi	r24, 0x01	; 1
 8e0:	51 f4       	brne	.+20     	; 0x8f6 <__stack+0x97>
 8e2:	87 e3       	ldi	r24, 0x37	; 55
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	27 e3       	ldi	r18, 0x37	; 55
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	f9 01       	movw	r30, r18
 8ec:	20 81       	ld	r18, Z
 8ee:	2d 7f       	andi	r18, 0xFD	; 253
 8f0:	fc 01       	movw	r30, r24
 8f2:	20 83       	st	Z, r18
 8f4:	05 c2       	rjmp	.+1034   	; 0xd00 <__stack+0x4a1>
 8f6:	87 e3       	ldi	r24, 0x37	; 55
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	27 e3       	ldi	r18, 0x37	; 55
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	f9 01       	movw	r30, r18
 900:	20 81       	ld	r18, Z
 902:	22 60       	ori	r18, 0x02	; 2
 904:	fc 01       	movw	r30, r24
 906:	20 83       	st	Z, r18
 908:	fb c1       	rjmp	.+1014   	; 0xd00 <__stack+0x4a1>
	case PIN10: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN2);}else{Set_Bit(DDRB,PIN2);} ;break;
 90a:	8a 81       	ldd	r24, Y+2	; 0x02
 90c:	81 30       	cpi	r24, 0x01	; 1
 90e:	51 f4       	brne	.+20     	; 0x924 <__stack+0xc5>
 910:	87 e3       	ldi	r24, 0x37	; 55
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	27 e3       	ldi	r18, 0x37	; 55
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	f9 01       	movw	r30, r18
 91a:	20 81       	ld	r18, Z
 91c:	2b 7f       	andi	r18, 0xFB	; 251
 91e:	fc 01       	movw	r30, r24
 920:	20 83       	st	Z, r18
 922:	ee c1       	rjmp	.+988    	; 0xd00 <__stack+0x4a1>
 924:	87 e3       	ldi	r24, 0x37	; 55
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	27 e3       	ldi	r18, 0x37	; 55
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	f9 01       	movw	r30, r18
 92e:	20 81       	ld	r18, Z
 930:	24 60       	ori	r18, 0x04	; 4
 932:	fc 01       	movw	r30, r24
 934:	20 83       	st	Z, r18
 936:	e4 c1       	rjmp	.+968    	; 0xd00 <__stack+0x4a1>
	case PIN11:  if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN3);}else{Set_Bit(DDRB,PIN3);} ;break;
 938:	8a 81       	ldd	r24, Y+2	; 0x02
 93a:	81 30       	cpi	r24, 0x01	; 1
 93c:	51 f4       	brne	.+20     	; 0x952 <__stack+0xf3>
 93e:	87 e3       	ldi	r24, 0x37	; 55
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	27 e3       	ldi	r18, 0x37	; 55
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	f9 01       	movw	r30, r18
 948:	20 81       	ld	r18, Z
 94a:	27 7f       	andi	r18, 0xF7	; 247
 94c:	fc 01       	movw	r30, r24
 94e:	20 83       	st	Z, r18
 950:	d7 c1       	rjmp	.+942    	; 0xd00 <__stack+0x4a1>
 952:	87 e3       	ldi	r24, 0x37	; 55
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	27 e3       	ldi	r18, 0x37	; 55
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	f9 01       	movw	r30, r18
 95c:	20 81       	ld	r18, Z
 95e:	28 60       	ori	r18, 0x08	; 8
 960:	fc 01       	movw	r30, r24
 962:	20 83       	st	Z, r18
 964:	cd c1       	rjmp	.+922    	; 0xd00 <__stack+0x4a1>
	case PIN12: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN4);}else{Set_Bit(DDRB,PIN4);} ;break;
 966:	8a 81       	ldd	r24, Y+2	; 0x02
 968:	81 30       	cpi	r24, 0x01	; 1
 96a:	51 f4       	brne	.+20     	; 0x980 <__stack+0x121>
 96c:	87 e3       	ldi	r24, 0x37	; 55
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	27 e3       	ldi	r18, 0x37	; 55
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	f9 01       	movw	r30, r18
 976:	20 81       	ld	r18, Z
 978:	2f 7e       	andi	r18, 0xEF	; 239
 97a:	fc 01       	movw	r30, r24
 97c:	20 83       	st	Z, r18
 97e:	c0 c1       	rjmp	.+896    	; 0xd00 <__stack+0x4a1>
 980:	87 e3       	ldi	r24, 0x37	; 55
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	27 e3       	ldi	r18, 0x37	; 55
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	f9 01       	movw	r30, r18
 98a:	20 81       	ld	r18, Z
 98c:	20 61       	ori	r18, 0x10	; 16
 98e:	fc 01       	movw	r30, r24
 990:	20 83       	st	Z, r18
 992:	b6 c1       	rjmp	.+876    	; 0xd00 <__stack+0x4a1>
	case PIN13: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN5);}else{Set_Bit(DDRB,PIN5);} ;break;
 994:	8a 81       	ldd	r24, Y+2	; 0x02
 996:	81 30       	cpi	r24, 0x01	; 1
 998:	51 f4       	brne	.+20     	; 0x9ae <__stack+0x14f>
 99a:	87 e3       	ldi	r24, 0x37	; 55
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	27 e3       	ldi	r18, 0x37	; 55
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	f9 01       	movw	r30, r18
 9a4:	20 81       	ld	r18, Z
 9a6:	2f 7d       	andi	r18, 0xDF	; 223
 9a8:	fc 01       	movw	r30, r24
 9aa:	20 83       	st	Z, r18
 9ac:	a9 c1       	rjmp	.+850    	; 0xd00 <__stack+0x4a1>
 9ae:	87 e3       	ldi	r24, 0x37	; 55
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	27 e3       	ldi	r18, 0x37	; 55
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	f9 01       	movw	r30, r18
 9b8:	20 81       	ld	r18, Z
 9ba:	20 62       	ori	r18, 0x20	; 32
 9bc:	fc 01       	movw	r30, r24
 9be:	20 83       	st	Z, r18
 9c0:	9f c1       	rjmp	.+830    	; 0xd00 <__stack+0x4a1>
	case PIN14: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN6);}else{Set_Bit(DDRB,PIN6);} ;break;
 9c2:	8a 81       	ldd	r24, Y+2	; 0x02
 9c4:	81 30       	cpi	r24, 0x01	; 1
 9c6:	51 f4       	brne	.+20     	; 0x9dc <__stack+0x17d>
 9c8:	87 e3       	ldi	r24, 0x37	; 55
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	27 e3       	ldi	r18, 0x37	; 55
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	f9 01       	movw	r30, r18
 9d2:	20 81       	ld	r18, Z
 9d4:	2f 7b       	andi	r18, 0xBF	; 191
 9d6:	fc 01       	movw	r30, r24
 9d8:	20 83       	st	Z, r18
 9da:	92 c1       	rjmp	.+804    	; 0xd00 <__stack+0x4a1>
 9dc:	87 e3       	ldi	r24, 0x37	; 55
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	27 e3       	ldi	r18, 0x37	; 55
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	f9 01       	movw	r30, r18
 9e6:	20 81       	ld	r18, Z
 9e8:	20 64       	ori	r18, 0x40	; 64
 9ea:	fc 01       	movw	r30, r24
 9ec:	20 83       	st	Z, r18
 9ee:	88 c1       	rjmp	.+784    	; 0xd00 <__stack+0x4a1>
	case PIN15: if(PinDirection==OUTPUT){Clear_Bit(DDRB,PIN7);}else{Set_Bit(DDRB,PIN7);} ;break;
 9f0:	8a 81       	ldd	r24, Y+2	; 0x02
 9f2:	81 30       	cpi	r24, 0x01	; 1
 9f4:	51 f4       	brne	.+20     	; 0xa0a <__stack+0x1ab>
 9f6:	87 e3       	ldi	r24, 0x37	; 55
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	27 e3       	ldi	r18, 0x37	; 55
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	f9 01       	movw	r30, r18
 a00:	20 81       	ld	r18, Z
 a02:	2f 77       	andi	r18, 0x7F	; 127
 a04:	fc 01       	movw	r30, r24
 a06:	20 83       	st	Z, r18
 a08:	7b c1       	rjmp	.+758    	; 0xd00 <__stack+0x4a1>
 a0a:	87 e3       	ldi	r24, 0x37	; 55
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	27 e3       	ldi	r18, 0x37	; 55
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	f9 01       	movw	r30, r18
 a14:	20 81       	ld	r18, Z
 a16:	20 68       	ori	r18, 0x80	; 128
 a18:	fc 01       	movw	r30, r24
 a1a:	20 83       	st	Z, r18
 a1c:	71 c1       	rjmp	.+738    	; 0xd00 <__stack+0x4a1>
	case PIN16: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN0);}else{Set_Bit(DDRC,PIN0);} ;break;
 a1e:	8a 81       	ldd	r24, Y+2	; 0x02
 a20:	81 30       	cpi	r24, 0x01	; 1
 a22:	51 f4       	brne	.+20     	; 0xa38 <__stack+0x1d9>
 a24:	84 e3       	ldi	r24, 0x34	; 52
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	24 e3       	ldi	r18, 0x34	; 52
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	f9 01       	movw	r30, r18
 a2e:	20 81       	ld	r18, Z
 a30:	2e 7f       	andi	r18, 0xFE	; 254
 a32:	fc 01       	movw	r30, r24
 a34:	20 83       	st	Z, r18
 a36:	64 c1       	rjmp	.+712    	; 0xd00 <__stack+0x4a1>
 a38:	84 e3       	ldi	r24, 0x34	; 52
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	24 e3       	ldi	r18, 0x34	; 52
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	f9 01       	movw	r30, r18
 a42:	20 81       	ld	r18, Z
 a44:	21 60       	ori	r18, 0x01	; 1
 a46:	fc 01       	movw	r30, r24
 a48:	20 83       	st	Z, r18
 a4a:	5a c1       	rjmp	.+692    	; 0xd00 <__stack+0x4a1>
	case PIN17: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN1);}else{Set_Bit(DDRC,PIN1);} ;break;
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	81 30       	cpi	r24, 0x01	; 1
 a50:	51 f4       	brne	.+20     	; 0xa66 <__stack+0x207>
 a52:	84 e3       	ldi	r24, 0x34	; 52
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	24 e3       	ldi	r18, 0x34	; 52
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	f9 01       	movw	r30, r18
 a5c:	20 81       	ld	r18, Z
 a5e:	2d 7f       	andi	r18, 0xFD	; 253
 a60:	fc 01       	movw	r30, r24
 a62:	20 83       	st	Z, r18
 a64:	4d c1       	rjmp	.+666    	; 0xd00 <__stack+0x4a1>
 a66:	84 e3       	ldi	r24, 0x34	; 52
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	24 e3       	ldi	r18, 0x34	; 52
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	f9 01       	movw	r30, r18
 a70:	20 81       	ld	r18, Z
 a72:	22 60       	ori	r18, 0x02	; 2
 a74:	fc 01       	movw	r30, r24
 a76:	20 83       	st	Z, r18
 a78:	43 c1       	rjmp	.+646    	; 0xd00 <__stack+0x4a1>
	case PIN18: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN2);}else{Set_Bit(DDRC,PIN2);} ;break;
 a7a:	8a 81       	ldd	r24, Y+2	; 0x02
 a7c:	81 30       	cpi	r24, 0x01	; 1
 a7e:	51 f4       	brne	.+20     	; 0xa94 <__stack+0x235>
 a80:	84 e3       	ldi	r24, 0x34	; 52
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	24 e3       	ldi	r18, 0x34	; 52
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	f9 01       	movw	r30, r18
 a8a:	20 81       	ld	r18, Z
 a8c:	2b 7f       	andi	r18, 0xFB	; 251
 a8e:	fc 01       	movw	r30, r24
 a90:	20 83       	st	Z, r18
 a92:	36 c1       	rjmp	.+620    	; 0xd00 <__stack+0x4a1>
 a94:	84 e3       	ldi	r24, 0x34	; 52
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	24 e3       	ldi	r18, 0x34	; 52
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	f9 01       	movw	r30, r18
 a9e:	20 81       	ld	r18, Z
 aa0:	24 60       	ori	r18, 0x04	; 4
 aa2:	fc 01       	movw	r30, r24
 aa4:	20 83       	st	Z, r18
 aa6:	2c c1       	rjmp	.+600    	; 0xd00 <__stack+0x4a1>
	case PIN19: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN3);}else{Set_Bit(DDRC,PIN3);} ;break;
 aa8:	8a 81       	ldd	r24, Y+2	; 0x02
 aaa:	81 30       	cpi	r24, 0x01	; 1
 aac:	51 f4       	brne	.+20     	; 0xac2 <__stack+0x263>
 aae:	84 e3       	ldi	r24, 0x34	; 52
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	24 e3       	ldi	r18, 0x34	; 52
 ab4:	30 e0       	ldi	r19, 0x00	; 0
 ab6:	f9 01       	movw	r30, r18
 ab8:	20 81       	ld	r18, Z
 aba:	27 7f       	andi	r18, 0xF7	; 247
 abc:	fc 01       	movw	r30, r24
 abe:	20 83       	st	Z, r18
 ac0:	1f c1       	rjmp	.+574    	; 0xd00 <__stack+0x4a1>
 ac2:	84 e3       	ldi	r24, 0x34	; 52
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	24 e3       	ldi	r18, 0x34	; 52
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	f9 01       	movw	r30, r18
 acc:	20 81       	ld	r18, Z
 ace:	28 60       	ori	r18, 0x08	; 8
 ad0:	fc 01       	movw	r30, r24
 ad2:	20 83       	st	Z, r18
 ad4:	15 c1       	rjmp	.+554    	; 0xd00 <__stack+0x4a1>
	case PIN20: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN4);}else{Set_Bit(DDRC,PIN4);} ;break;
 ad6:	8a 81       	ldd	r24, Y+2	; 0x02
 ad8:	81 30       	cpi	r24, 0x01	; 1
 ada:	51 f4       	brne	.+20     	; 0xaf0 <__stack+0x291>
 adc:	84 e3       	ldi	r24, 0x34	; 52
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	24 e3       	ldi	r18, 0x34	; 52
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	f9 01       	movw	r30, r18
 ae6:	20 81       	ld	r18, Z
 ae8:	2f 7e       	andi	r18, 0xEF	; 239
 aea:	fc 01       	movw	r30, r24
 aec:	20 83       	st	Z, r18
 aee:	08 c1       	rjmp	.+528    	; 0xd00 <__stack+0x4a1>
 af0:	84 e3       	ldi	r24, 0x34	; 52
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	24 e3       	ldi	r18, 0x34	; 52
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	f9 01       	movw	r30, r18
 afa:	20 81       	ld	r18, Z
 afc:	20 61       	ori	r18, 0x10	; 16
 afe:	fc 01       	movw	r30, r24
 b00:	20 83       	st	Z, r18
 b02:	fe c0       	rjmp	.+508    	; 0xd00 <__stack+0x4a1>
	case PIN21: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN5);}else{Set_Bit(DDRC,PIN5);} ;break;
 b04:	8a 81       	ldd	r24, Y+2	; 0x02
 b06:	81 30       	cpi	r24, 0x01	; 1
 b08:	51 f4       	brne	.+20     	; 0xb1e <__stack+0x2bf>
 b0a:	84 e3       	ldi	r24, 0x34	; 52
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	24 e3       	ldi	r18, 0x34	; 52
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	f9 01       	movw	r30, r18
 b14:	20 81       	ld	r18, Z
 b16:	2f 7d       	andi	r18, 0xDF	; 223
 b18:	fc 01       	movw	r30, r24
 b1a:	20 83       	st	Z, r18
 b1c:	f1 c0       	rjmp	.+482    	; 0xd00 <__stack+0x4a1>
 b1e:	84 e3       	ldi	r24, 0x34	; 52
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	24 e3       	ldi	r18, 0x34	; 52
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	f9 01       	movw	r30, r18
 b28:	20 81       	ld	r18, Z
 b2a:	20 62       	ori	r18, 0x20	; 32
 b2c:	fc 01       	movw	r30, r24
 b2e:	20 83       	st	Z, r18
 b30:	e7 c0       	rjmp	.+462    	; 0xd00 <__stack+0x4a1>
	case PIN22: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN6);}else{Set_Bit(DDRC,PIN6);} ;break;
 b32:	8a 81       	ldd	r24, Y+2	; 0x02
 b34:	81 30       	cpi	r24, 0x01	; 1
 b36:	51 f4       	brne	.+20     	; 0xb4c <__stack+0x2ed>
 b38:	84 e3       	ldi	r24, 0x34	; 52
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	24 e3       	ldi	r18, 0x34	; 52
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	f9 01       	movw	r30, r18
 b42:	20 81       	ld	r18, Z
 b44:	2f 7b       	andi	r18, 0xBF	; 191
 b46:	fc 01       	movw	r30, r24
 b48:	20 83       	st	Z, r18
 b4a:	da c0       	rjmp	.+436    	; 0xd00 <__stack+0x4a1>
 b4c:	84 e3       	ldi	r24, 0x34	; 52
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	24 e3       	ldi	r18, 0x34	; 52
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	f9 01       	movw	r30, r18
 b56:	20 81       	ld	r18, Z
 b58:	20 64       	ori	r18, 0x40	; 64
 b5a:	fc 01       	movw	r30, r24
 b5c:	20 83       	st	Z, r18
 b5e:	d0 c0       	rjmp	.+416    	; 0xd00 <__stack+0x4a1>
	case PIN23: if(PinDirection==OUTPUT){Clear_Bit(DDRC,PIN7);}else{Set_Bit(DDRC,PIN7);} ;break;
 b60:	8a 81       	ldd	r24, Y+2	; 0x02
 b62:	81 30       	cpi	r24, 0x01	; 1
 b64:	51 f4       	brne	.+20     	; 0xb7a <__stack+0x31b>
 b66:	84 e3       	ldi	r24, 0x34	; 52
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	24 e3       	ldi	r18, 0x34	; 52
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	f9 01       	movw	r30, r18
 b70:	20 81       	ld	r18, Z
 b72:	2f 77       	andi	r18, 0x7F	; 127
 b74:	fc 01       	movw	r30, r24
 b76:	20 83       	st	Z, r18
 b78:	c3 c0       	rjmp	.+390    	; 0xd00 <__stack+0x4a1>
 b7a:	84 e3       	ldi	r24, 0x34	; 52
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	24 e3       	ldi	r18, 0x34	; 52
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	f9 01       	movw	r30, r18
 b84:	20 81       	ld	r18, Z
 b86:	20 68       	ori	r18, 0x80	; 128
 b88:	fc 01       	movw	r30, r24
 b8a:	20 83       	st	Z, r18
 b8c:	b9 c0       	rjmp	.+370    	; 0xd00 <__stack+0x4a1>
	case PIN24: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN0);}else{Set_Bit(DDRD,PIN0);} ;break;
 b8e:	8a 81       	ldd	r24, Y+2	; 0x02
 b90:	81 30       	cpi	r24, 0x01	; 1
 b92:	51 f4       	brne	.+20     	; 0xba8 <__stack+0x349>
 b94:	81 e3       	ldi	r24, 0x31	; 49
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	21 e3       	ldi	r18, 0x31	; 49
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	f9 01       	movw	r30, r18
 b9e:	20 81       	ld	r18, Z
 ba0:	2e 7f       	andi	r18, 0xFE	; 254
 ba2:	fc 01       	movw	r30, r24
 ba4:	20 83       	st	Z, r18
 ba6:	ac c0       	rjmp	.+344    	; 0xd00 <__stack+0x4a1>
 ba8:	81 e3       	ldi	r24, 0x31	; 49
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	21 e3       	ldi	r18, 0x31	; 49
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	f9 01       	movw	r30, r18
 bb2:	20 81       	ld	r18, Z
 bb4:	21 60       	ori	r18, 0x01	; 1
 bb6:	fc 01       	movw	r30, r24
 bb8:	20 83       	st	Z, r18
 bba:	a2 c0       	rjmp	.+324    	; 0xd00 <__stack+0x4a1>
	case PIN25: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN1);}else{Set_Bit(DDRD,PIN1);} ;break;
 bbc:	8a 81       	ldd	r24, Y+2	; 0x02
 bbe:	81 30       	cpi	r24, 0x01	; 1
 bc0:	51 f4       	brne	.+20     	; 0xbd6 <__stack+0x377>
 bc2:	81 e3       	ldi	r24, 0x31	; 49
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	21 e3       	ldi	r18, 0x31	; 49
 bc8:	30 e0       	ldi	r19, 0x00	; 0
 bca:	f9 01       	movw	r30, r18
 bcc:	20 81       	ld	r18, Z
 bce:	2d 7f       	andi	r18, 0xFD	; 253
 bd0:	fc 01       	movw	r30, r24
 bd2:	20 83       	st	Z, r18
 bd4:	95 c0       	rjmp	.+298    	; 0xd00 <__stack+0x4a1>
 bd6:	81 e3       	ldi	r24, 0x31	; 49
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	21 e3       	ldi	r18, 0x31	; 49
 bdc:	30 e0       	ldi	r19, 0x00	; 0
 bde:	f9 01       	movw	r30, r18
 be0:	20 81       	ld	r18, Z
 be2:	22 60       	ori	r18, 0x02	; 2
 be4:	fc 01       	movw	r30, r24
 be6:	20 83       	st	Z, r18
 be8:	8b c0       	rjmp	.+278    	; 0xd00 <__stack+0x4a1>
	case PIN26: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN2);}else{Set_Bit(DDRD,PIN2);} ;break;
 bea:	8a 81       	ldd	r24, Y+2	; 0x02
 bec:	81 30       	cpi	r24, 0x01	; 1
 bee:	51 f4       	brne	.+20     	; 0xc04 <__stack+0x3a5>
 bf0:	81 e3       	ldi	r24, 0x31	; 49
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	21 e3       	ldi	r18, 0x31	; 49
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	f9 01       	movw	r30, r18
 bfa:	20 81       	ld	r18, Z
 bfc:	2b 7f       	andi	r18, 0xFB	; 251
 bfe:	fc 01       	movw	r30, r24
 c00:	20 83       	st	Z, r18
 c02:	7e c0       	rjmp	.+252    	; 0xd00 <__stack+0x4a1>
 c04:	81 e3       	ldi	r24, 0x31	; 49
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	21 e3       	ldi	r18, 0x31	; 49
 c0a:	30 e0       	ldi	r19, 0x00	; 0
 c0c:	f9 01       	movw	r30, r18
 c0e:	20 81       	ld	r18, Z
 c10:	24 60       	ori	r18, 0x04	; 4
 c12:	fc 01       	movw	r30, r24
 c14:	20 83       	st	Z, r18
 c16:	74 c0       	rjmp	.+232    	; 0xd00 <__stack+0x4a1>
	case PIN27: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN3);}else{Set_Bit(DDRD,PIN3);} ;break;
 c18:	8a 81       	ldd	r24, Y+2	; 0x02
 c1a:	81 30       	cpi	r24, 0x01	; 1
 c1c:	51 f4       	brne	.+20     	; 0xc32 <__stack+0x3d3>
 c1e:	81 e3       	ldi	r24, 0x31	; 49
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	21 e3       	ldi	r18, 0x31	; 49
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	f9 01       	movw	r30, r18
 c28:	20 81       	ld	r18, Z
 c2a:	27 7f       	andi	r18, 0xF7	; 247
 c2c:	fc 01       	movw	r30, r24
 c2e:	20 83       	st	Z, r18
 c30:	67 c0       	rjmp	.+206    	; 0xd00 <__stack+0x4a1>
 c32:	81 e3       	ldi	r24, 0x31	; 49
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	21 e3       	ldi	r18, 0x31	; 49
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	f9 01       	movw	r30, r18
 c3c:	20 81       	ld	r18, Z
 c3e:	28 60       	ori	r18, 0x08	; 8
 c40:	fc 01       	movw	r30, r24
 c42:	20 83       	st	Z, r18
 c44:	5d c0       	rjmp	.+186    	; 0xd00 <__stack+0x4a1>
	case PIN28: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN4);}else{Set_Bit(DDRD,PIN4);} ;break;
 c46:	8a 81       	ldd	r24, Y+2	; 0x02
 c48:	81 30       	cpi	r24, 0x01	; 1
 c4a:	51 f4       	brne	.+20     	; 0xc60 <__stack+0x401>
 c4c:	81 e3       	ldi	r24, 0x31	; 49
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	21 e3       	ldi	r18, 0x31	; 49
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	f9 01       	movw	r30, r18
 c56:	20 81       	ld	r18, Z
 c58:	2f 7e       	andi	r18, 0xEF	; 239
 c5a:	fc 01       	movw	r30, r24
 c5c:	20 83       	st	Z, r18
 c5e:	50 c0       	rjmp	.+160    	; 0xd00 <__stack+0x4a1>
 c60:	81 e3       	ldi	r24, 0x31	; 49
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	21 e3       	ldi	r18, 0x31	; 49
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	f9 01       	movw	r30, r18
 c6a:	20 81       	ld	r18, Z
 c6c:	20 61       	ori	r18, 0x10	; 16
 c6e:	fc 01       	movw	r30, r24
 c70:	20 83       	st	Z, r18
 c72:	46 c0       	rjmp	.+140    	; 0xd00 <__stack+0x4a1>
	case PIN29: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN5);}else{Set_Bit(DDRD,PIN5);} ;break;
 c74:	8a 81       	ldd	r24, Y+2	; 0x02
 c76:	81 30       	cpi	r24, 0x01	; 1
 c78:	51 f4       	brne	.+20     	; 0xc8e <__stack+0x42f>
 c7a:	81 e3       	ldi	r24, 0x31	; 49
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	21 e3       	ldi	r18, 0x31	; 49
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	f9 01       	movw	r30, r18
 c84:	20 81       	ld	r18, Z
 c86:	2f 7d       	andi	r18, 0xDF	; 223
 c88:	fc 01       	movw	r30, r24
 c8a:	20 83       	st	Z, r18
 c8c:	39 c0       	rjmp	.+114    	; 0xd00 <__stack+0x4a1>
 c8e:	81 e3       	ldi	r24, 0x31	; 49
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	21 e3       	ldi	r18, 0x31	; 49
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	f9 01       	movw	r30, r18
 c98:	20 81       	ld	r18, Z
 c9a:	20 62       	ori	r18, 0x20	; 32
 c9c:	fc 01       	movw	r30, r24
 c9e:	20 83       	st	Z, r18
 ca0:	2f c0       	rjmp	.+94     	; 0xd00 <__stack+0x4a1>
	case PIN30: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN6);}else{Set_Bit(DDRD,PIN6);} ;break;
 ca2:	8a 81       	ldd	r24, Y+2	; 0x02
 ca4:	81 30       	cpi	r24, 0x01	; 1
 ca6:	51 f4       	brne	.+20     	; 0xcbc <__stack+0x45d>
 ca8:	81 e3       	ldi	r24, 0x31	; 49
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	21 e3       	ldi	r18, 0x31	; 49
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	f9 01       	movw	r30, r18
 cb2:	20 81       	ld	r18, Z
 cb4:	2f 7b       	andi	r18, 0xBF	; 191
 cb6:	fc 01       	movw	r30, r24
 cb8:	20 83       	st	Z, r18
 cba:	22 c0       	rjmp	.+68     	; 0xd00 <__stack+0x4a1>
 cbc:	81 e3       	ldi	r24, 0x31	; 49
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	21 e3       	ldi	r18, 0x31	; 49
 cc2:	30 e0       	ldi	r19, 0x00	; 0
 cc4:	f9 01       	movw	r30, r18
 cc6:	20 81       	ld	r18, Z
 cc8:	20 64       	ori	r18, 0x40	; 64
 cca:	fc 01       	movw	r30, r24
 ccc:	20 83       	st	Z, r18
 cce:	18 c0       	rjmp	.+48     	; 0xd00 <__stack+0x4a1>
	case PIN31: if(PinDirection==OUTPUT){Clear_Bit(DDRD,PIN7);}else{Set_Bit(DDRD,PIN7);} ;break;
 cd0:	8a 81       	ldd	r24, Y+2	; 0x02
 cd2:	81 30       	cpi	r24, 0x01	; 1
 cd4:	51 f4       	brne	.+20     	; 0xcea <__stack+0x48b>
 cd6:	81 e3       	ldi	r24, 0x31	; 49
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	21 e3       	ldi	r18, 0x31	; 49
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	f9 01       	movw	r30, r18
 ce0:	20 81       	ld	r18, Z
 ce2:	2f 77       	andi	r18, 0x7F	; 127
 ce4:	fc 01       	movw	r30, r24
 ce6:	20 83       	st	Z, r18
 ce8:	0b c0       	rjmp	.+22     	; 0xd00 <__stack+0x4a1>
 cea:	81 e3       	ldi	r24, 0x31	; 49
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	21 e3       	ldi	r18, 0x31	; 49
 cf0:	30 e0       	ldi	r19, 0x00	; 0
 cf2:	f9 01       	movw	r30, r18
 cf4:	20 81       	ld	r18, Z
 cf6:	20 68       	ori	r18, 0x80	; 128
 cf8:	fc 01       	movw	r30, r24
 cfa:	20 83       	st	Z, r18
 cfc:	01 c0       	rjmp	.+2      	; 0xd00 <__stack+0x4a1>
    
	default: break; 
 cfe:	00 00       	nop
	
	}
}
 d00:	00 00       	nop
 d02:	0f 90       	pop	r0
 d04:	0f 90       	pop	r0
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	08 95       	ret

00000d0c <main>:

#include "Includes/Timer.h"
#include "Motor/Motor.h"

int main(void)
{
 d0c:	cf 93       	push	r28
 d0e:	df 93       	push	r29
 d10:	cd b7       	in	r28, 0x3d	; 61
 d12:	de b7       	in	r29, 0x3e	; 62
	
timer_init();
 d14:	0e 94 c9 06 	call	0xd92	; 0xd92 <timer_init>

DIO_SetPinDirection(PIN30,OUTPUT);
 d18:	61 e0       	ldi	r22, 0x01	; 1
 d1a:	8e e1       	ldi	r24, 0x1E	; 30
 d1c:	0e 94 82 03 	call	0x704	; 0x704 <DIO_SetPinDirection>
DIO_SetPinDirection(PIN31,OUTPUT);
 d20:	61 e0       	ldi	r22, 0x01	; 1
 d22:	8f e1       	ldi	r24, 0x1F	; 31
 d24:	0e 94 82 03 	call	0x704	; 0x704 <DIO_SetPinDirection>
				

Motor_Init();
 d28:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Motor_Init>

	
DIO_WritePin(PIN30,LOW);
 d2c:	60 e0       	ldi	r22, 0x00	; 0
 d2e:	8e e1       	ldi	r24, 0x1E	; 30
 d30:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_WritePin>
DIO_WritePin(PIN31,HIGH);
 d34:	61 e0       	ldi	r22, 0x01	; 1
 d36:	8f e1       	ldi	r24, 0x1F	; 31
 d38:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_WritePin>
    while (1) 
    {
		
		

    }
 d3c:	ff cf       	rjmp	.-2      	; 0xd3c <main+0x30>

00000d3e <Motor_Init>:
volatile uint16 Speed_Value;

	
	void Motor_Init (void)
	
	{
 d3e:	cf 93       	push	r28
 d40:	df 93       	push	r29
 d42:	cd b7       	in	r28, 0x3d	; 61
 d44:	de b7       	in	r29, 0x3e	; 62
			/* Set Enable pins Output */
			DIO_SetPinDirection(OC1A,OUTPUT);
 d46:	61 e0       	ldi	r22, 0x01	; 1
 d48:	8d e1       	ldi	r24, 0x1D	; 29
 d4a:	0e 94 82 03 	call	0x704	; 0x704 <DIO_SetPinDirection>
			DIO_SetPinDirection(OC1B,OUTPUT);
 d4e:	61 e0       	ldi	r22, 0x01	; 1
 d50:	8c e1       	ldi	r24, 0x1C	; 28
 d52:	0e 94 82 03 	call	0x704	; 0x704 <DIO_SetPinDirection>
			
			ICR1H_H=((TOP_VALUE>>EIGHTBITS) & MASK);
 d56:	87 e4       	ldi	r24, 0x47	; 71
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	2a ed       	ldi	r18, 0xDA	; 218
 d5c:	fc 01       	movw	r30, r24
 d5e:	20 83       	st	Z, r18
			ICR1L_H=((TOP_VALUE>>ZEROBITS) & MASK);
 d60:	86 e4       	ldi	r24, 0x46	; 70
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	2a ed       	ldi	r18, 0xDA	; 218
 d66:	fc 01       	movw	r30, r24
 d68:	20 83       	st	Z, r18
			OCR1AH_H=COMPARE_Value_H;
 d6a:	8b e4       	ldi	r24, 0x4B	; 75
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 d72:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
 d76:	fc 01       	movw	r30, r24
 d78:	20 83       	st	Z, r18
			OCR1AL_H=COMPARE_Value_L;
 d7a:	8a e4       	ldi	r24, 0x4A	; 74
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <COMPARE_Value_L>
 d82:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <COMPARE_Value_L+0x1>
 d86:	fc 01       	movw	r30, r24
 d88:	20 83       	st	Z, r18

	}
 d8a:	00 00       	nop
 d8c:	df 91       	pop	r29
 d8e:	cf 91       	pop	r28
 d90:	08 95       	ret

00000d92 <timer_init>:
/* Initialize Timer Zero */                                                                    
/************************************************************************/


void timer_init(void)
{	
 d92:	cf 93       	push	r28
 d94:	df 93       	push	r29
 d96:	cd b7       	in	r28, 0x3d	; 61
 d98:	de b7       	in	r29, 0x3e	; 62

	/* Mode 14: Fast PWM to Read top from ICR1 */
	Clear_Bit(TCCR1A_H,WGM10);
 d9a:	8f e4       	ldi	r24, 0x4F	; 79
 d9c:	90 e0       	ldi	r25, 0x00	; 0
 d9e:	2f e4       	ldi	r18, 0x4F	; 79
 da0:	30 e0       	ldi	r19, 0x00	; 0
 da2:	f9 01       	movw	r30, r18
 da4:	20 81       	ld	r18, Z
 da6:	2e 7f       	andi	r18, 0xFE	; 254
 da8:	fc 01       	movw	r30, r24
 daa:	20 83       	st	Z, r18
	Set_Bit(TCCR1A_H,WGM11);
 dac:	8f e4       	ldi	r24, 0x4F	; 79
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	2f e4       	ldi	r18, 0x4F	; 79
 db2:	30 e0       	ldi	r19, 0x00	; 0
 db4:	f9 01       	movw	r30, r18
 db6:	20 81       	ld	r18, Z
 db8:	22 60       	ori	r18, 0x02	; 2
 dba:	fc 01       	movw	r30, r24
 dbc:	20 83       	st	Z, r18
	Set_Bit(TCCR1B_H,WGM12);
 dbe:	8e e4       	ldi	r24, 0x4E	; 78
 dc0:	90 e0       	ldi	r25, 0x00	; 0
 dc2:	2e e4       	ldi	r18, 0x4E	; 78
 dc4:	30 e0       	ldi	r19, 0x00	; 0
 dc6:	f9 01       	movw	r30, r18
 dc8:	20 81       	ld	r18, Z
 dca:	28 60       	ori	r18, 0x08	; 8
 dcc:	fc 01       	movw	r30, r24
 dce:	20 83       	st	Z, r18
	Set_Bit(TCCR1B_H,WGM13);
 dd0:	8e e4       	ldi	r24, 0x4E	; 78
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	2e e4       	ldi	r18, 0x4E	; 78
 dd6:	30 e0       	ldi	r19, 0x00	; 0
 dd8:	f9 01       	movw	r30, r18
 dda:	20 81       	ld	r18, Z
 ddc:	20 61       	ori	r18, 0x10	; 16
 dde:	fc 01       	movw	r30, r24
 de0:	20 83       	st	Z, r18

	/* Output Compare Mode / Fast PWM / Inverted */
	Set_Bit(TCCR1A_H,COM1A1);
 de2:	8f e4       	ldi	r24, 0x4F	; 79
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	2f e4       	ldi	r18, 0x4F	; 79
 de8:	30 e0       	ldi	r19, 0x00	; 0
 dea:	f9 01       	movw	r30, r18
 dec:	20 81       	ld	r18, Z
 dee:	20 68       	ori	r18, 0x80	; 128
 df0:	fc 01       	movw	r30, r24
 df2:	20 83       	st	Z, r18
	Set_Bit(TCCR1A_H,COM1A0);
 df4:	8f e4       	ldi	r24, 0x4F	; 79
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	2f e4       	ldi	r18, 0x4F	; 79
 dfa:	30 e0       	ldi	r19, 0x00	; 0
 dfc:	f9 01       	movw	r30, r18
 dfe:	20 81       	ld	r18, Z
 e00:	20 64       	ori	r18, 0x40	; 64
 e02:	fc 01       	movw	r30, r24
 e04:	20 83       	st	Z, r18
	Set_Bit(TCCR1A_H,COM1B1);
 e06:	8f e4       	ldi	r24, 0x4F	; 79
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	2f e4       	ldi	r18, 0x4F	; 79
 e0c:	30 e0       	ldi	r19, 0x00	; 0
 e0e:	f9 01       	movw	r30, r18
 e10:	20 81       	ld	r18, Z
 e12:	20 62       	ori	r18, 0x20	; 32
 e14:	fc 01       	movw	r30, r24
 e16:	20 83       	st	Z, r18
	Set_Bit(TCCR1A_H,COM1B0);
 e18:	8f e4       	ldi	r24, 0x4F	; 79
 e1a:	90 e0       	ldi	r25, 0x00	; 0
 e1c:	2f e4       	ldi	r18, 0x4F	; 79
 e1e:	30 e0       	ldi	r19, 0x00	; 0
 e20:	f9 01       	movw	r30, r18
 e22:	20 81       	ld	r18, Z
 e24:	20 61       	ori	r18, 0x10	; 16
 e26:	fc 01       	movw	r30, r24
 e28:	20 83       	st	Z, r18
	Clear_Bit(TCCR1A,FOC1A);	
	*/

	
    /* Reset TCNT0 & SET The Compare Reg to a value */	
	TCNT1H_H=RESET;
 e2a:	8d e4       	ldi	r24, 0x4D	; 77
 e2c:	90 e0       	ldi	r25, 0x00	; 0
 e2e:	fc 01       	movw	r30, r24
 e30:	10 82       	st	Z, r1
	TCNT1L_H=RESET;
 e32:	8c e4       	ldi	r24, 0x4C	; 76
 e34:	90 e0       	ldi	r25, 0x00	; 0
 e36:	fc 01       	movw	r30, r24
 e38:	10 82       	st	Z, r1

	/* Set Pre-Scaler to No Prescaler*/	
	Set_Bit(TCCR1B_H,CS10);
 e3a:	8e e4       	ldi	r24, 0x4E	; 78
 e3c:	90 e0       	ldi	r25, 0x00	; 0
 e3e:	2e e4       	ldi	r18, 0x4E	; 78
 e40:	30 e0       	ldi	r19, 0x00	; 0
 e42:	f9 01       	movw	r30, r18
 e44:	20 81       	ld	r18, Z
 e46:	21 60       	ori	r18, 0x01	; 1
 e48:	fc 01       	movw	r30, r24
 e4a:	20 83       	st	Z, r18
	Clear_Bit(TCCR1B_H,CS11);
 e4c:	8e e4       	ldi	r24, 0x4E	; 78
 e4e:	90 e0       	ldi	r25, 0x00	; 0
 e50:	2e e4       	ldi	r18, 0x4E	; 78
 e52:	30 e0       	ldi	r19, 0x00	; 0
 e54:	f9 01       	movw	r30, r18
 e56:	20 81       	ld	r18, Z
 e58:	2d 7f       	andi	r18, 0xFD	; 253
 e5a:	fc 01       	movw	r30, r24
 e5c:	20 83       	st	Z, r18
	Clear_Bit(TCCR1B_H,CS12);
 e5e:	8e e4       	ldi	r24, 0x4E	; 78
 e60:	90 e0       	ldi	r25, 0x00	; 0
 e62:	2e e4       	ldi	r18, 0x4E	; 78
 e64:	30 e0       	ldi	r19, 0x00	; 0
 e66:	f9 01       	movw	r30, r18
 e68:	20 81       	ld	r18, Z
 e6a:	2b 7f       	andi	r18, 0xFB	; 251
 e6c:	fc 01       	movw	r30, r24
 e6e:	20 83       	st	Z, r18
	Clear_Bit(SREG_H,GIE);
 e70:	8f e5       	ldi	r24, 0x5F	; 95
 e72:	90 e0       	ldi	r25, 0x00	; 0
 e74:	2f e5       	ldi	r18, 0x5F	; 95
 e76:	30 e0       	ldi	r19, 0x00	; 0
 e78:	f9 01       	movw	r30, r18
 e7a:	20 81       	ld	r18, Z
 e7c:	2f 77       	andi	r18, 0x7F	; 127
 e7e:	fc 01       	movw	r30, r24
 e80:	20 83       	st	Z, r18
}
 e82:	00 00       	nop
 e84:	df 91       	pop	r29
 e86:	cf 91       	pop	r28
 e88:	08 95       	ret

00000e8a <__tablejump2__>:
 e8a:	ee 0f       	add	r30, r30
 e8c:	ff 1f       	adc	r31, r31
 e8e:	05 90       	lpm	r0, Z+
 e90:	f4 91       	lpm	r31, Z
 e92:	e0 2d       	mov	r30, r0
 e94:	09 94       	ijmp

00000e96 <_exit>:
 e96:	f8 94       	cli

00000e98 <__stop_program>:
 e98:	ff cf       	rjmp	.-2      	; 0xe98 <__stop_program>
