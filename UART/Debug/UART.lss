
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081a  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063b  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c8  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000293  00000000  00000000  00001ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
 */ 


#include "UART.h"
int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
    UART_Init();
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_Init>

	
    while (1) 
    {
		UART_Transmit(1);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <UART_Transmit>
    }
  8e:	fc cf       	rjmp	.-8      	; 0x88 <main+0xc>

00000090 <__vector_10>:
{
	callback_ptr=callback;
}

ISR(TIMER0_COMP_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	(*callback_ptr)();
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  c4:	fc 01       	movw	r30, r24
  c6:	09 95       	icall
}
  c8:	00 00       	nop
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	7f 91       	pop	r23
  dc:	6f 91       	pop	r22
  de:	5f 91       	pop	r21
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <UART_Init>:

#include "Config_UART.h"
#include "UART.h"

void UART_Init(void)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	28 97       	sbiw	r28, 0x08	; 8
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
	/*Define structure members*/
	UART_Config_S UART_Struct; //={BAUDRATE,NO_STOPBITS,PARITYMODE,DATASIZE,SPEEDMODE};
		UART_Struct.BaudRate=BAUDRATE;
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	95 e2       	ldi	r25, 0x25	; 37
 10a:	9c 83       	std	Y+4, r25	; 0x04
 10c:	8b 83       	std	Y+3, r24	; 0x03
		UART_Struct.No_StopBits=NO_STOPBITS;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	8d 83       	std	Y+5, r24	; 0x05
		UART_Struct.ParityMode=PARITYMODE;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	8e 83       	std	Y+6, r24	; 0x06
		UART_Struct.DataSize=DATASIZE;
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	8f 83       	std	Y+7, r24	; 0x07
		UART_Struct.SpeedMode=SPEEDMODE;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	88 87       	std	Y+8, r24	; 0x08
		
		
	uint32 UBRR;
	UBRR =103;//((F_CPU/(UART_Struct.BaudRate*SIXTEEN)) - ONE);
 11e:	87 e6       	ldi	r24, 0x67	; 103
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9a 83       	std	Y+2, r25	; 0x02
 124:	89 83       	std	Y+1, r24	; 0x01
	/*Set Baud Rate*/
	UBRRH1 = (UBRR >> EIGHT);
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	3a 81       	ldd	r19, Y+2	; 0x02
 12e:	23 2f       	mov	r18, r19
 130:	33 27       	eor	r19, r19
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
	//UBRRL1 = UBRR;
	
	/*Enable UART Transmitter and Receiver*/
	UCSRB1	|= (TRUE<<RXEN1);
 136:	8a e2       	ldi	r24, 0x2A	; 42
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2a e2       	ldi	r18, 0x2A	; 42
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	20 61       	ori	r18, 0x10	; 16
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
	UCSRB1	|= (TRUE<<TXEN1);
 148:	8a e2       	ldi	r24, 0x2A	; 42
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	2a e2       	ldi	r18, 0x2A	; 42
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	28 60       	ori	r18, 0x08	; 8
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
	
	/*Set URSEL by one to write in UCSRC*/
	UCSRC1 |= (ONE<<URSEL1);
 15a:	80 e4       	ldi	r24, 0x40	; 64
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	20 e4       	ldi	r18, 0x40	; 64
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	20 68       	ori	r18, 0x80	; 128
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
	
	
	/*set 2 stop bits*/
	UCSRC1|= (ONE<<USBS1);
 16c:	80 e4       	ldi	r24, 0x40	; 64
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	20 e4       	ldi	r18, 0x40	; 64
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	28 60       	ori	r18, 0x08	; 8
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
	/*Set 8 bit data*/
	UCSRC1 |= (ONE<<UCSZ01);
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	20 e4       	ldi	r18, 0x40	; 64
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	22 60       	ori	r18, 0x02	; 2
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
	UCSRC1 |= (ONE<<UCSZ11);
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	20 e4       	ldi	r18, 0x40	; 64
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	f9 01       	movw	r30, r18
 19a:	20 81       	ld	r18, Z
 19c:	24 60       	ori	r18, 0x04	; 4
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
	
}
 1a2:	00 00       	nop
 1a4:	28 96       	adiw	r28, 0x08	; 8
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <UART_Transmit>:

void UART_Transmit(uint8 data)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	89 83       	std	Y+1, r24	; 0x01
	
	while(!(UCSRA1 & (1<<UDRE)));
 1c2:	00 00       	nop
 1c4:	8b e2       	ldi	r24, 0x2B	; 43
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	80 81       	ld	r24, Z
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	80 72       	andi	r24, 0x20	; 32
 1d2:	99 27       	eor	r25, r25
 1d4:	89 2b       	or	r24, r25
 1d6:	b1 f3       	breq	.-20     	; 0x1c4 <UART_Transmit+0xe>
	UDR1=data;
 1d8:	8c e2       	ldi	r24, 0x2C	; 44
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	29 81       	ldd	r18, Y+1	; 0x01
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
	
	
}
 1e2:	00 00       	nop
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
